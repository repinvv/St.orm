//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace StormTestProject
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;
    using System.ComponentModel.DataAnnotations.Schema;
    using System.Linq;
    using St.Orm;
    using St.Orm.Interfaces;

    [Table("model.covered")]
    public partial class Covered : ICloneable<Covered>
    {
        [Key]
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column("covered_id", Order = 1)]
        public int CoveredId { get;set; }

        [Column("covered_type", Order = 2)]
        public int CoveredType { get;set; }

        [Column("assignment_id", Order = 3)]
        public int AssignmentId { get;set; }

        [Column("headcount", Order = 4)]
        public int Headcount { get;set; }

        [Column("created", Order = 5)]
        public DateTime Created { get;set; }

        [Column("updated", Order = 6)]
        public DateTime Updated { get;set; }

        #region Private fields

        private readonly bool[] populated = new bool[0];
        private readonly ILoadService loadService;
        IQueryable<Covered> sourceQuery;
        private readonly Covered clonedFrom;

        #endregion

        #region Constructors

        public Covered(Covered clonedFrom, IQueryable<Covered> sourceQuery, ILoadService loadService)
        {
            this.clonedFrom = clonedFrom;
            this.loadService = loadService;
            this.sourceQuery = sourceQuery;
        }

        public Covered(IQueryable<Covered> sourceQuery, ILoadService loadService)
        {
            this.loadService = loadService;
            this.sourceQuery = sourceQuery;
        }

        public Covered()
        {
        }

        #endregion

        #region ICloneable implementation

        Covered ICloneable<Covered>.Clone()
        {
            return new Covered(this, sourceQuery, loadService)
            {
                CoveredId = CoveredId,
                CoveredType = CoveredType,
                AssignmentId = AssignmentId,
                Headcount = Headcount,
                Created = Created,
                Updated = Updated,
            };
        }

        Covered ICloneable<Covered>.ClonedFrom()
        {
            return clonedFrom;
        }

        bool[] ICloneable<Covered>.GetPopulated()
        {
            return populated;
        }

        #endregion

        #region Lazy properties

        #endregion
    }
}
