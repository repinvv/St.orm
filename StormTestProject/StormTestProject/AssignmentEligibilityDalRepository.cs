//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace StormTestProject
{
    using System;
    using System.Collections.Generic;
    using System.Data;
    using System.Linq;
    using St.Orm;
    using St.Orm.Implementation;
    using St.Orm.Interfaces;

    internal class AssignmentEligibilityDalRepository : IDalRepository<AssignmentEligibility, AssignmentEligibility>
    {
        private IDalRepositoryExtension<AssignmentEligibility> extension;

        public AssignmentEligibilityDalRepository()
        {
            extension = new EmptyRepositoryExtension<AssignmentEligibility>();
        }

        public void SetExtension(IDalRepositoryExtension<AssignmentEligibility> extension)
        {
            this.extension = extension;
        }

        public int RelationsCount()
        {
            return extension.RelationsCount() ?? 1;
        }

        public AssignmentEligibility Create(IDataReader reader, IQueryable<AssignmentEligibility> query, ILoadService loadService)
        {
            var entity = new AssignmentEligibility(query, loadService)
            {
                AssignmentId = reader.GetInt32(0),
                EligibilityId = reader.GetInt32(1),
                Created = reader.GetDateTime(2),
                Updated = reader.GetDateTime(3),
            };
            extension.ExtendCreate(entity, reader);
            return entity;
        }

        public AssignmentEligibility Clone(AssignmentEligibility source)
        {
            var clone = (source as ICloneable<AssignmentEligibility>).Clone();
            extension.ExtendClone(clone, source);
            return clone;
        }

        public List<AssignmentEligibility> Materialize(IQueryable<AssignmentEligibility> query, ILoadService loadService)
        {
            var context = loadService.Context;
            return AdoCommands.Materialize(query,
                reader => Create(reader, query, loadService),
                context.Connection,
                context.Transaction);
        }

        public IQueryable<AssignmentEligibility> GetByIdQuery(object id, IStormContext context)
        {
            throw new Exception("Get by id is only available for entities with single primary key field.");
        }

        public void Save(AssignmentEligibility entity, ISavesCollector saves)
        {
            if(!extension.PreSave(entity))
            {
                return;
            }

            SetMtoFields(entity);
            saves.Save<AssignmentEligibility, AssignmentEligibility>(entity);
        }

        public void Update(AssignmentEligibility entity, AssignmentEligibility existing, ISavesCollector saves)
        {
            if(!extension.PreUpdate(entity, existing))
            {
                Delete(entity, saves);
                return;
            }

            SetMtoFields(entity);
            if (EntityChanged(entity, existing))
            {
                saves.Update<AssignmentEligibility, AssignmentEligibility>(entity, existing);
            }
            else
            {
                saves.NoUpdate<AssignmentEligibility, AssignmentEligibility>(entity, existing);
            }
        }

        public void Delete(AssignmentEligibility entity, ISavesCollector saves)
        {
            if(!extension.PreDelete(entity))
            {
                return;
            }

            DeleteRelations(entity, saves);
            saves.Delete<AssignmentEligibility, AssignmentEligibility>(entity);
        }

        public void SaveRelations(AssignmentEligibility entity, ISavesCollector saves)
        {
            extension.ExtendSaveRelations(entity, saves);
        }

        public void UpdateRelations(AssignmentEligibility entity, AssignmentEligibility existing, ISavesCollector saves)
        {
            var populated = (entity as ICloneable<Policy>).GetPopulated();
            extension.ExtendSaveRelations(entity, saves);
        }

        private void DeleteRelations(AssignmentEligibility entity, ISavesCollector saves)
        {
        }

        private void SetMtoFields(AssignmentEligibility entity)
        {
            if(entity.Eligibility != null)
            {
                entity.EligibilityId = entity.Eligibility.EligibilityId;
            }
        }

        public bool EntityChanged(AssignmentEligibility entity, AssignmentEligibility existing)
        {
            return extension.ExtendEntityChanged(entity, existing)
                || entity.Created != existing.Created
                || entity.Updated != existing.Updated;
        }
    }
}
