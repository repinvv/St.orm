//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace StormTestProject
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;
    using System.ComponentModel.DataAnnotations.Schema;
    using System.Linq;
    using St.Orm;
    using St.Orm.Interfaces;

    [Table("model.coverage")]
    public partial class Coverage : ICloneable<Coverage>
    {
        [Key]
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column("coverage_id", Order = 1)]
        public int CoverageId { get;set; }

        [Column("policy_id", Order = 2)]
        public int PolicyId { get;set; }

        [MaxLength(256)]
        [Column("comment", Order = 3)]
        public string Comment { get;set; }

        [Column("created", Order = 4)]
        public DateTime Created { get;set; }

        [Column("updated", Order = 5)]
        public DateTime Updated { get;set; }

        public virtual ICollection<Department> Departments { get { return property0; } set { property0 = value; } }

        public virtual ICollection<EligibilityGroup> EligibilityGroups { get { return property1; } set { property1 = value; } }

        public virtual ICollection<Premium> Premiums { get { return property2; } set { property2 = value; } }

        public virtual ICollection<Covered> Covereds { get { return property3; } set { property3 = value; } }

        #region Private fields

        private readonly bool[] populated = new bool[4];
        private readonly ILoadService loadService;
        IQueryable<Coverage> sourceQuery;
        private readonly Coverage clonedFrom;
        private Department field0;
        private EligibilityGroup field1;
        private Premium field2;
        private Covered field3;

        #endregion

        #region Constructors

        public Coverage(Coverage clonedFrom, IQueryable<Coverage> sourceQuery, ILoadService loadService)
        {
            this.clonedFrom = clonedFrom;
            this.loadService = loadService;
            this.sourceQuery = sourceQuery;
        }

        public Coverage(IQueryable<Coverage> sourceQuery, ILoadService loadService)
        {
            this.loadService = loadService;
            this.sourceQuery = sourceQuery;
        }

        public Coverage()
        {
            Departments = new HashSet<Department>();
            EligibilityGroups = new HashSet<EligibilityGroup>();
            Premiums = new HashSet<Premium>();
            Covereds = new HashSet<Covered>();
        }

        #endregion

        #region ICloneable implementation

        Coverage ICloneable<Coverage>.Clone()
        {
            return new Coverage(this, sourceQuery, loadService)
            {
                CoverageId = CoverageId,
                PolicyId = PolicyId,
                Comment = Comment,
                Created = Created,
                Updated = Updated,
            };
        }

        Coverage ICloneable<Coverage>.ClonedFrom()
        {
            return clonedFrom;
        }

        bool[] ICloneable<Coverage>.GetPopulated()
        {
            return populated;
        }

        #endregion

        #region Lazy properties

        private ICollection<Department> property0 { get;set; }

        private ICollection<EligibilityGroup> property1 { get;set; }

        private ICollection<Premium> property2 { get;set; }

        private ICollection<Covered> property3 { get;set; }


        #endregion
    }
}
