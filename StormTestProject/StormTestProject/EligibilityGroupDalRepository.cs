//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace StormTestProject
{
    using System;
    using System.Collections.Generic;
    using System.Data;
    using System.Linq;
    using St.Orm;
    using St.Orm.Interfaces;

    internal class EligibilityGroupDalRepository : IDalRepository<EligibilityGroup, EligibilityGroup>
    {
        private IDalRepositoryExtension<EligibilityGroup> extension;

        public EligibilityGroupDalRepository()
        {
            extension = new EmptyRepositoryExtension<EligibilityGroup>();
        }

        public void SetExtension(IDalRepositoryExtension<EligibilityGroup> extension)
        {
            this.extension = extension;
        }

        public int RelationsCount()
        {
            return extension.RelationsCount() ?? 0;
        }

        public EligibilityGroup Clone(EligibilityGroup source)
        {
            var clone = (source as ICloneable<EligibilityGroup>).Clone();
            extension.ExtendClone(clone, source);
            return clone;
        }

        public EligibilityGroup Create(IDataReader reader, IQueryable<EligibilityGroup> query, ILoadService loadService)
        {
            var entity = new EligibilityGroup(query, loadService)
            {
                EligibilityGroupId = reader.GetInt32(0),
                Name = reader[1] as string,
                Created = reader.GetDateTime(2),
                Updated = reader.GetDateTime(3),
            };
            extension.ExtendCreate(entity, reader);
            return entity;
        }

        public List<EligibilityGroup> Materialize(IQueryable<EligibilityGroup> query, ILoadService loadService)
        {
            var context = loadService.Context;
            return AdoCommands.Materialize(query,
                reader => Create(reader, query, loadService),
                context.Connection,
                context.Transaction);
        }
    }
}
