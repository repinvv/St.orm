//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace StormTestProject
{
    using System;
    using System.Collections.Generic;
    using System.Data;
    using System.Linq;
    using St.Orm;
    using St.Orm.Interfaces;

    internal class PremiumDalRepository : IDalRepository<Premium, Premium>
    {
        private IDalRepositoryExtension<Premium> extension;

        public PremiumDalRepository()
        {
            extension = new EmptyRepositoryExtension<Premium>();
        }

        public void SetExtension(IDalRepositoryExtension<Premium> extension)
        {
            this.extension = extension;
        }

        public int RelationsCount()
        {
            return extension.RelationsCount() ?? 1;
        }

        public Premium Clone(Premium source)
        {
            var clone = new Premium(source)
            {
                PremiumId = source.PremiumId,
                PremiumType = source.PremiumType,
                CoverageId = source.CoverageId,
                Amount = source.Amount,
                Created = source.Created,
                Updated = source.Updated,
            };
            extension.ExtendClone(clone, source);
            return clone;
        }

        public Premium Create(IDataReader reader, ILoadService loadService)
        {
            var entity = new Premium(loadService)
            {
                PremiumId = reader.GetInt32(0),
                PremiumType = reader.GetInt32(1),
                CoverageId = reader.GetInt32(2),
                Amount = reader.GetDecimal(3),
                Created = reader.GetDateTime(4),
                Updated = reader.GetDateTime(5),
            };
            extension.ExtendCreate(entity, reader);
            return entity;
        }

        public List<Premium> Materialize(IQueryable<Premium> query, ILoadService loadService)
        {
            var context = loadService.Context;
            return AdoCommands.Materialize(query as IQueryable<Premium>,
                reader => Create(reader, loadService),
                context.Connection,
                context.Transaction);
        }
    }
}
