//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace StormTestProject
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;
    using System.ComponentModel.DataAnnotations.Schema;
    using System.Linq;
    using St.Orm;
    using St.Orm.Interfaces;

    [Table("model.policy")]
    public partial class Policy : ICloneable<Policy>
    {
        [Key]
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column("policy_id", Order = 1)]
        public int PolicyId { get;set; }

        [Column("country_id", Order = 2)]
        public int CountryId { get;set; }

        [Column("currency_id", Order = 3)]
        public int? CurrencyId { get;set; }

        [Required]
        [MaxLength(256)]
        [Column("name", Order = 4)]
        public string Name { get;set; }

        [Column("created", Order = 5)]
        public DateTime Created { get;set; }

        [Column("updated", Order = 6)]
        public DateTime Updated { get;set; }

        public virtual ICollection<Tax> Taxes { get { return property0; } set { property0 = value; } }

        public virtual ICollection<Assignment> Assignments { get { return property1; } set { property1 = value; } }

        public virtual ICollection<Comment> Comments { get { return property2; } set { property2 = value; } }

        #region Private fields

        private readonly bool[] populated = new bool[3];
        private readonly ILoadService loadService;
        IQueryable<Policy> sourceQuery;
        private readonly Policy clonedFrom;
        private Tax field0;
        private Assignment field1;
        private Comment field2;

        #endregion

        #region Constructors

        public Policy(Policy clonedFrom, IQueryable<Policy> sourceQuery, ILoadService loadService)
        {
            this.clonedFrom = clonedFrom;
            this.loadService = loadService;
            this.sourceQuery = sourceQuery;
        }

        public Policy(IQueryable<Policy> sourceQuery, ILoadService loadService)
        {
            this.loadService = loadService;
            this.sourceQuery = sourceQuery;
        }

        public Policy()
        {
            Taxes = new HashSet<Tax>();
            Assignments = new HashSet<Assignment>();
            Comments = new HashSet<Comment>();
        }

        #endregion

        #region ICloneable implementation

        Policy ICloneable<Policy>.Clone()
        {
            return new Policy(this, sourceQuery, loadService)
            {
                PolicyId = PolicyId,
                CountryId = CountryId,
                CurrencyId = CurrencyId,
                Name = Name,
                Created = Created,
                Updated = Updated,
            };
        }

        Policy ICloneable<Policy>.ClonedFrom()
        {
            return clonedFrom;
        }

        bool[] ICloneable<Policy>.GetPopulated()
        {
            return populated;
        }

        #endregion

        #region Lazy properties

        private ICollection<Tax> property0 { get;set; }

        private ICollection<Assignment> property1 { get;set; }

        private ICollection<Comment> property2 { get;set; }

        #endregion
    }
}
