//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace StormTestProject.StormModel
{
    using System;
    using System.Collections.Generic;
    using System.Data;
    using System.Data.Common;
    using System.Data.SqlClient;
    using System.Linq;
    using System.Text;
    using St.Orm;
    using St.Orm.Implementation;
    using St.Orm.Interfaces;

    internal class CommentDalRepository : IDalRepository<Comment, Comment>
    {
        private IDalRepositoryExtension<Comment> extension;

        public CommentDalRepository()
        {
            extension = new EmptyRepositoryExtension<Comment>();
        }

        public void SetExtension(IDalRepositoryExtension<Comment> extension)
        {
            this.extension = extension;
        }

        public int RelationsCount()
        {
            return extension.RelationsCount() ?? 0;
        }

        public Comment Create(IDataReader reader, IQueryable<Comment> query, ILoadService loadService)
        {
            var entity = new Comment(query, loadService)
            {
                CommentId = reader.GetInt32(0),
                CommentType = reader.GetInt32(1),
                PolicyId = reader[2] as int?,
                PremiumId = reader[3] as int?,
                CommentText = reader[4] as string,
                AuthorUserId = reader.GetInt32(5),
                Created = reader.GetDateTime(6),
                Updated = reader.GetDateTime(7),
            };
            extension.ExtendCreate(entity, reader);
            return entity;
        }

        public Comment Clone(Comment source)
        {
            var clone = (source as ICloneable<Comment>).Clone();
            extension.ExtendClone(clone, source);
            return clone;
        }

        public List<Comment> Materialize(IQueryable<Comment> query, ILoadService loadService)
        {
            var context = loadService.Context;
            return AdoCommands.Materialize(query,
                reader => Create(reader, query, loadService),
                context.Connection,
                context.Transaction);
        }

        public IQueryable<Comment> GetByIdQuery(object id, IStormContext context)
        {
            var key = (int)id;
            return context.Set<Comment>().Where(x => x.CommentId == key);
        }

        public void Save(Comment entity, ISavesCollector saves)
        {
            if(!extension.PreSave(entity))
            {
                return;
            }

            SetMtoFields(entity);
            saves.Save<Comment, Comment>(entity);
        }

        public void Update(Comment entity, Comment existing, ISavesCollector saves)
        {
            if(!extension.PreUpdate(entity, existing))
            {
                Delete(entity, saves);
                return;
            }

            SetMtoFields(entity);
            if (EntityChanged(entity, existing))
            {
                saves.Update<Comment, Comment>(entity, existing);
            }
            else
            {
                saves.NoUpdate<Comment, Comment>(entity, existing);
            }
        }

        public void Delete(Comment entity, ISavesCollector saves)
        {
            if(!extension.PreDelete(entity))
            {
                return;
            }

            DeleteRelations(entity, saves);
            saves.Delete<Comment, Comment>(entity);
        }

        public void SaveRelations(Comment entity, ISavesCollector saves)
        {
            extension.ExtendSaveRelations(entity, saves);
        }

        public void UpdateRelations(Comment entity, Comment existing, ISavesCollector saves)
        {
            var populated = (entity as ICloneable<Policy>).GetPopulated();
            extension.ExtendSaveRelations(entity, saves);
        }

        private void DeleteRelations(Comment entity, ISavesCollector saves)
        {
        }

        private void SetMtoFields(Comment entity)
        {
        }

        public bool EntityChanged(Comment entity, Comment existing)
        {
            return extension.ExtendEntityChanged(entity, existing)
                || entity.CommentType != existing.CommentType
                || entity.PolicyId != existing.PolicyId
                || entity.PremiumId != existing.PremiumId
                || entity.CommentText != existing.CommentText
                || entity.AuthorUserId != existing.AuthorUserId
                || entity.Created != existing.Created
                || entity.Updated != existing.Updated;
        }

        public void Insert(IStormContext context, IList<Comment> entities)
        {
            for (int index = 0; index < entities.Count; index++)
            {
                PersistenceEvents.BeforeInsert(entities[index]);
            }

            using (new ConnectionHandler(context.Connection))
            {
                AdoCommands.SplitRun(entities.AsList(), x => RangeInsert(x, context.Connection, context.Transaction), 142);
            }
        }

        private void RangeInsert(List<Comment> entities, DbConnection connection, DbTransaction transaction)
        {
            int i;
            var sb = new StringBuilder();
            sb.AppendLine("INSERT INTO model.comment");
            sb.AppendLine("    (comment_type, policy_id, premium_id, comment_text, author_user_id, created, updated)");
            sb.AppendLine("OUTPUT inserted.comment_id");
            sb.AppendLine("VALUES");
            sb.AppendLine("    (@parm1i0, @parm2i0, @parm3i0, @parm4i0, @parm5i0, @parm6i0, @parm7i0)");
            for (i = 1; i < entities.Count; i++)
            {
                sb.AppendLine("   ,(@parm1i" + i + ", @parm2i" + i + ", @parm3i" + i + ", @parm4i" + i + ", @parm5i" + i + ", @parm6i" + i + ", @parm7i" + i + ")");
            }

            var parameters = new List<SqlParameter>(entities.Count*7);
            for (i = 0; i < entities.Count; i++)
            {
                var entity = entities[i];
                parameters.Add(new SqlParameter("@parm1i" + i, entity.CommentType));
                parameters.Add(new SqlParameter("@parm2i" + i, entity.PolicyId ?? (object)DBNull.Value));
                parameters.Add(new SqlParameter("@parm3i" + i, entity.PremiumId ?? (object)DBNull.Value));
                parameters.Add(new SqlParameter("@parm4i" + i, entity.CommentText ?? (object)DBNull.Value));
                parameters.Add(new SqlParameter("@parm5i" + i, entity.AuthorUserId));
                parameters.Add(new SqlParameter("@parm6i" + i, entity.Created));
                parameters.Add(new SqlParameter("@parm7i" + i, entity.Updated));
            }

            i = 0;
            AdoCommands.RunCommand(sb.ToString(), parameters.ToArray(), connection, transaction, r => entities[i++].CommentId = r.GetInt32(0));
        }
    }
}
