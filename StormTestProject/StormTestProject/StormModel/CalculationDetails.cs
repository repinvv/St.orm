//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace StormTestProject.StormModel
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;
    using System.ComponentModel.DataAnnotations.Schema;
    using System.Linq;
    using St.Orm;
    using St.Orm.Interfaces;

    [Table("calculation_details", Schema = "stats")]
    public partial class CalculationDetails : ICloneable<CalculationDetails>, IEquatable<CalculationDetails>, IHaveId
    {
        [Key]
        [Column("calculation_details_id", Order = 1)]
        public Guid CalculationDetailsId { get;set; }

        [Column("calculation_id", Order = 2)]
        public Guid CalculationId { get;set; }

        [Column("year", Order = 3)]
        public int Year { get;set; }

        [Column("month", Order = 4)]
        public int Month { get;set; }

        [Column("value", Order = 5)]
        public decimal Value { get;set; }

        #region Navigation properties
        #endregion

        #region Private fields
        private readonly ILoadService loadService;
        IQueryable<CalculationDetails> sourceQuery;
        private readonly CalculationDetails clonedFrom;
        #endregion

        #region Constructors
        public CalculationDetails(CalculationDetails clonedFrom, IQueryable<CalculationDetails> sourceQuery, ILoadService loadService)
        {
            this.clonedFrom = clonedFrom;
            this.loadService = loadService;
            this.sourceQuery = sourceQuery;
        }

        public CalculationDetails(IQueryable<CalculationDetails> sourceQuery, ILoadService loadService)
        {
            this.loadService = loadService;
            this.sourceQuery = sourceQuery;
        }

        public CalculationDetails()
        {
        }
        #endregion

        #region ICloneable implementation
        CalculationDetails ICloneable<CalculationDetails>.Clone()
        {
            return new CalculationDetails(this, sourceQuery, loadService)
            {
                CalculationDetailsId = CalculationDetailsId,
                CalculationId = CalculationId,
                Year = Year,
                Month = Month,
                Value = Value,
            };
        }

        CalculationDetails ICloneable<CalculationDetails>.ClonedFrom()
        {
            return clonedFrom;
        }

        bool[] ICloneable<CalculationDetails>.GetPopulated()
        {
            return null;
        }
        #endregion

        #region Equality members
        public override bool Equals(object obj)
        {
            return Equals(obj as CalculationDetails);
        }

        public bool Equals(CalculationDetails other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            return CalculationDetailsId == other.CalculationDetailsId;
        }

        public override int GetHashCode()
        {
            unchecked
            {
                return CalculationDetailsId.GetHashCode();
            }
        }

        public static bool operator ==(CalculationDetails left, CalculationDetails right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CalculationDetails left, CalculationDetails right)
        {
            return !Equals(left, right);
        }
        #endregion
    }
}
