//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace StormTestProject.StormModel
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;
    using System.ComponentModel.DataAnnotations.Schema;
    using System.Linq;
    using St.Orm;
    using St.Orm.Interfaces;

    [Table("tax", Schema = "model")]
    public partial class Tax : ICloneable<Tax>, IEquatable<Tax>, IHaveId
    {
        [Key]
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [Column("tax_id", Order = 1)]
        public int TaxId { get;set; }

        [Column("policy_id", Order = 2)]
        public int PolicyId { get;set; }

        [Column("amount", Order = 3)]
        public decimal Amount { get;set; }

        [Column("created", Order = 4)]
        public DateTime Created { get;set; }

        [Column("updated", Order = 5)]
        public DateTime Updated { get;set; }

        #region Navigation properties
        #endregion

        #region Private fields
        private readonly ILoadService loadService;
        IQueryable<Tax> sourceQuery;
        private readonly Tax clonedFrom;
        #endregion

        #region Constructors
        public Tax(Tax clonedFrom, IQueryable<Tax> sourceQuery, ILoadService loadService)
        {
            this.clonedFrom = clonedFrom;
            this.loadService = loadService;
            this.sourceQuery = sourceQuery;
        }

        public Tax(IQueryable<Tax> sourceQuery, ILoadService loadService)
        {
            this.loadService = loadService;
            this.sourceQuery = sourceQuery;
        }

        public Tax()
        {
        }
        #endregion

        #region ICloneable implementation
        Tax ICloneable<Tax>.Clone()
        {
            return new Tax(this, sourceQuery, loadService)
            {
                TaxId = TaxId,
                PolicyId = PolicyId,
                Amount = Amount,
                Created = Created,
                Updated = Updated,
            };
        }

        Tax ICloneable<Tax>.ClonedFrom()
        {
            return clonedFrom;
        }

        bool[] ICloneable<Tax>.GetPopulated()
        {
            return null;
        }
        #endregion

        #region Equality members
        public override bool Equals(object obj)
        {
            return Equals(obj as Tax);
        }

        public bool Equals(Tax other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            return TaxId == other.TaxId;
        }

        public override int GetHashCode()
        {
            unchecked
            {
                return TaxId.GetHashCode();
            }
        }

        public static bool operator ==(Tax left, Tax right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Tax left, Tax right)
        {
            return !Equals(left, right);
        }
        #endregion
    }
}
