//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace StormTestProject.StormModel
{
    using System.ComponentModel.DataAnnotations.Schema;
    using System.Data.Entity;
    using St.Orm.Interfaces;

    public partial class StormTestContext : DbContext
    {
        public StormTestContext() : base("name=StormTestContext") { }

        public virtual DbSet<Calculation> Calculations { get; set; }

        public virtual DbSet<CalculationDetails> CalculationDetailses { get; set; }

        public virtual DbSet<Department> Departments { get; set; }

        public virtual DbSet<Eligibility> Eligibilities { get; set; }

        public virtual DbSet<Currency> Currencies { get; set; }

        public virtual DbSet<Country> Countries { get; set; }

        public virtual DbSet<Policy> Policies { get; set; }

        public virtual DbSet<Tax> Taxes { get; set; }

        public virtual DbSet<Assignment> Assignments { get; set; }

        public virtual DbSet<AssignmentDepartment> AssignmentDepartments { get; set; }

        public virtual DbSet<AssignmentEligibility> AssignmentEligibilities { get; set; }

        public virtual DbSet<Premium> Premiums { get; set; }

        public virtual DbSet<Covered> Covereds { get; set; }

        public virtual DbSet<Comment> Comments { get; set; }

        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            InitializeCalculationFields(modelBuilder);
            InitializeCalculationDetailsFields(modelBuilder);
            InitializeDepartmentFields(modelBuilder);
            InitializeEligibilityFields(modelBuilder);
            InitializeCurrencyFields(modelBuilder);
            InitializeCountryFields(modelBuilder);
            InitializePolicyFields(modelBuilder);
            InitializeTaxFields(modelBuilder);
            InitializeAssignmentFields(modelBuilder);
            InitializeAssignmentDepartmentFields(modelBuilder);
            InitializeAssignmentEligibilityFields(modelBuilder);
            InitializePremiumFields(modelBuilder);
            InitializeCoveredFields(modelBuilder);
            InitializeCommentFields(modelBuilder);
        }

        protected virtual void InitializeCalculationFields(DbModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Calculation>()
                .ToTable("calculation", "stats")
                .HasKey(x => x.CalculationId);
            modelBuilder.Entity<Calculation>()
                .HasMany(x => x.CalculationDetailses)
                .WithRequired()
                .HasForeignKey(x => x.CalculationId);
            modelBuilder.Entity<Calculation>()
                .Property(e => e.CalculationId)
                .HasDatabaseGeneratedOption(DatabaseGeneratedOption.None)
                .HasColumnName("calculation_id")
                .HasColumnType("uniqueidentifier")
                .HasColumnOrder(1);
            modelBuilder.Entity<Calculation>()
                .Property(e => e.Name)
                .HasMaxLength(256)
                .HasColumnName("name")
                .HasColumnType("nvarchar")
                .HasColumnOrder(2);
            modelBuilder.Entity<Calculation>()
                .Property(e => e.DueDate)
                .HasColumnName("due_date")
                .HasColumnType("date")
                .HasColumnOrder(3);
        }

        protected virtual void InitializeCalculationDetailsFields(DbModelBuilder modelBuilder)
        {
            modelBuilder.Entity<CalculationDetails>()
                .ToTable("calculation_details", "stats")
                .HasKey(x => x.CalculationDetailsId);
            modelBuilder.Entity<CalculationDetails>()
                .Property(e => e.CalculationDetailsId)
                .HasDatabaseGeneratedOption(DatabaseGeneratedOption.None)
                .HasColumnName("calculation_details_id")
                .HasColumnType("uniqueidentifier")
                .HasColumnOrder(1);
            modelBuilder.Entity<CalculationDetails>()
                .Property(e => e.CalculationId)
                .HasColumnName("calculation_id")
                .HasColumnType("uniqueidentifier")
                .HasColumnOrder(2);
            modelBuilder.Entity<CalculationDetails>()
                .Property(e => e.Year)
                .HasColumnName("year")
                .HasColumnType("int")
                .HasColumnOrder(3);
            modelBuilder.Entity<CalculationDetails>()
                .Property(e => e.Month)
                .HasColumnName("month")
                .HasColumnType("int")
                .HasColumnOrder(4);
            modelBuilder.Entity<CalculationDetails>()
                .Property(e => e.Value)
                .HasPrecision(18, 2)
                .HasColumnName("value")
                .HasColumnType("decimal")
                .HasColumnOrder(5);
        }

        protected virtual void InitializeDepartmentFields(DbModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Department>()
                .ToTable("department", "dbo")
                .HasKey(x => x.DepartmentId);
            modelBuilder.Entity<Department>()
                .Property(e => e.DepartmentId)
                .HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity)
                .HasColumnName("department_id")
                .HasColumnType("int")
                .HasColumnOrder(1);
            modelBuilder.Entity<Department>()
                .Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(256)
                .HasColumnName("name")
                .HasColumnType("nvarchar")
                .HasColumnOrder(2);
            modelBuilder.Entity<Department>()
                .Property(e => e.Created)
                .HasColumnName("created")
                .HasColumnType("datetime2")
                .HasColumnOrder(3);
            modelBuilder.Entity<Department>()
                .Property(e => e.Updated)
                .HasColumnName("updated")
                .HasColumnType("datetime2")
                .HasColumnOrder(4);
        }

        protected virtual void InitializeEligibilityFields(DbModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Eligibility>()
                .ToTable("eligibility", "dbo")
                .HasKey(x => x.EligibilityId);
            modelBuilder.Entity<Eligibility>()
                .Property(e => e.EligibilityId)
                .HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity)
                .HasColumnName("eligibility_id")
                .HasColumnType("int")
                .HasColumnOrder(1);
            modelBuilder.Entity<Eligibility>()
                .Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(256)
                .HasColumnName("name")
                .HasColumnType("nvarchar")
                .HasColumnOrder(2);
            modelBuilder.Entity<Eligibility>()
                .Property(e => e.Created)
                .HasColumnName("created")
                .HasColumnType("datetime2")
                .HasColumnOrder(3);
            modelBuilder.Entity<Eligibility>()
                .Property(e => e.Updated)
                .HasColumnName("updated")
                .HasColumnType("datetime2")
                .HasColumnOrder(4);
        }

        protected virtual void InitializeCurrencyFields(DbModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Currency>()
                .ToTable("currency", "dbo")
                .HasKey(x => x.CurrencyId);
            modelBuilder.Entity<Currency>()
                .HasMany(x => x.Policies)
                .WithRequired()
                .HasForeignKey(x => x.CurrencyId);
            modelBuilder.Entity<Currency>()
                .Property(e => e.CurrencyId)
                .HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity)
                .HasColumnName("currency_id")
                .HasColumnType("int")
                .HasColumnOrder(1);
            modelBuilder.Entity<Currency>()
                .Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(256)
                .HasColumnName("name")
                .HasColumnType("nvarchar")
                .HasColumnOrder(2);
            modelBuilder.Entity<Currency>()
                .Property(e => e.CurrencyCode)
                .IsRequired()
                .HasMaxLength(10)
                .HasColumnName("currency_code")
                .HasColumnType("nvarchar")
                .HasColumnOrder(3);
            modelBuilder.Entity<Currency>()
                .Property(e => e.Created)
                .HasColumnName("created")
                .HasColumnType("datetime2")
                .HasColumnOrder(4);
            modelBuilder.Entity<Currency>()
                .Property(e => e.Updated)
                .HasColumnName("updated")
                .HasColumnType("datetime2")
                .HasColumnOrder(5);
        }

        protected virtual void InitializeCountryFields(DbModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Country>()
                .ToTable("country", "dbo")
                .HasKey(x => x.CountryId);
            modelBuilder.Entity<Country>()
                .HasMany(x => x.Policies)
                .WithOptional(x => x.Country)
                .HasForeignKey(x => x.CountryId);
            modelBuilder.Entity<Country>()
                .Property(e => e.CountryId)
                .HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity)
                .HasColumnName("country_id")
                .HasColumnType("int")
                .HasColumnOrder(1);
            modelBuilder.Entity<Country>()
                .Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(256)
                .HasColumnName("name")
                .HasColumnType("nvarchar")
                .HasColumnOrder(2);
            modelBuilder.Entity<Country>()
                .Property(e => e.CountryCode)
                .IsRequired()
                .HasMaxLength(10)
                .HasColumnName("country_code")
                .HasColumnType("nvarchar")
                .HasColumnOrder(3);
            modelBuilder.Entity<Country>()
                .Property(e => e.Created)
                .HasColumnName("created")
                .HasColumnType("datetime2")
                .HasColumnOrder(4);
            modelBuilder.Entity<Country>()
                .Property(e => e.Updated)
                .HasColumnName("updated")
                .HasColumnType("datetime2")
                .HasColumnOrder(5);
        }

        protected virtual void InitializePolicyFields(DbModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Policy>()
                .ToTable("policy", "model")
                .HasKey(x => x.PolicyId);
            modelBuilder.Entity<Policy>()
                .HasMany(x => x.Taxes)
                .WithRequired()
                .HasForeignKey(x => x.PolicyId);
            modelBuilder.Entity<Policy>()
                .HasMany(x => x.Assignments)
                .WithRequired()
                .HasForeignKey(x => x.PolicyId);
            modelBuilder.Entity<Policy>()
                .HasMany(x => x.Comments)
                .WithOptional()
                .HasForeignKey(x => x.PolicyId);
            modelBuilder.Entity<Policy>()
                .Property(e => e.PolicyId)
                .HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity)
                .HasColumnName("policy_id")
                .HasColumnType("int")
                .HasColumnOrder(1);
            modelBuilder.Entity<Policy>()
                .Property(e => e.CountryId)
                .HasColumnName("country_id")
                .HasColumnType("int")
                .HasColumnOrder(2);
            modelBuilder.Entity<Policy>()
                .Property(e => e.CurrencyId)
                .HasColumnName("currency_id")
                .HasColumnType("int")
                .HasColumnOrder(3);
            modelBuilder.Entity<Policy>()
                .Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(256)
                .HasColumnName("name")
                .HasColumnType("nvarchar")
                .HasColumnOrder(4);
            modelBuilder.Entity<Policy>()
                .Property(e => e.Created)
                .HasColumnName("created")
                .HasColumnType("datetime2")
                .HasColumnOrder(5);
            modelBuilder.Entity<Policy>()
                .Property(e => e.Updated)
                .HasColumnName("updated")
                .HasColumnType("datetime2")
                .HasColumnOrder(6);
        }

        protected virtual void InitializeTaxFields(DbModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Tax>()
                .ToTable("tax", "model")
                .HasKey(x => x.TaxId);
            modelBuilder.Entity<Tax>()
                .Property(e => e.TaxId)
                .HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity)
                .HasColumnName("tax_id")
                .HasColumnType("int")
                .HasColumnOrder(1);
            modelBuilder.Entity<Tax>()
                .Property(e => e.PolicyId)
                .HasColumnName("policy_id")
                .HasColumnType("int")
                .HasColumnOrder(2);
            modelBuilder.Entity<Tax>()
                .Property(e => e.Amount)
                .HasPrecision(18, 2)
                .HasColumnName("amount")
                .HasColumnType("decimal")
                .HasColumnOrder(3);
            modelBuilder.Entity<Tax>()
                .Property(e => e.Created)
                .HasColumnName("created")
                .HasColumnType("datetime2")
                .HasColumnOrder(4);
            modelBuilder.Entity<Tax>()
                .Property(e => e.Updated)
                .HasColumnName("updated")
                .HasColumnType("datetime2")
                .HasColumnOrder(5);
        }

        protected virtual void InitializeAssignmentFields(DbModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Assignment>()
                .ToTable("assignment", "model")
                .HasKey(x => x.AssignmentId);
            modelBuilder.Entity<Assignment>()
                .Ignore(x => x.Departments);
            modelBuilder.Entity<Assignment>()
                .Ignore(x => x.Eligibilities);
            modelBuilder.Entity<Assignment>()
                .HasMany(x => x.Premiums)
                .WithRequired()
                .HasForeignKey(x => x.AssignmentId);
            modelBuilder.Entity<Assignment>()
                .HasMany(x => x.Covereds)
                .WithRequired()
                .HasForeignKey(x => x.AssignmentId);
            modelBuilder.Entity<Assignment>()
                .Property(e => e.AssignmentId)
                .HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity)
                .HasColumnName("assignment_id")
                .HasColumnType("int")
                .HasColumnOrder(1);
            modelBuilder.Entity<Assignment>()
                .Property(e => e.PolicyId)
                .HasColumnName("policy_id")
                .HasColumnType("int")
                .HasColumnOrder(2);
            modelBuilder.Entity<Assignment>()
                .Property(e => e.Comment)
                .HasMaxLength(256)
                .HasColumnName("comment")
                .HasColumnType("nvarchar")
                .HasColumnOrder(3);
            modelBuilder.Entity<Assignment>()
                .Property(e => e.Created)
                .HasColumnName("created")
                .HasColumnType("datetime2")
                .HasColumnOrder(4);
            modelBuilder.Entity<Assignment>()
                .Property(e => e.Updated)
                .HasColumnName("updated")
                .HasColumnType("datetime2")
                .HasColumnOrder(5);
        }

        protected virtual void InitializeAssignmentDepartmentFields(DbModelBuilder modelBuilder)
        {
            modelBuilder.Entity<AssignmentDepartment>()
                .ToTable("assignment_department", "model")
                .HasKey(x => new { f1 = x.AssignmentId, f2 = x.DepartmentId });
            modelBuilder.Entity<AssignmentDepartment>()
                .HasRequired(x => x.Department)
                .WithMany()
                .HasForeignKey(x => x.DepartmentId);
            modelBuilder.Entity<AssignmentDepartment>()
                .Property(e => e.AssignmentId)
                .HasDatabaseGeneratedOption(DatabaseGeneratedOption.None)
                .HasColumnName("assignment_id")
                .HasColumnType("int")
                .HasColumnOrder(1);
            modelBuilder.Entity<AssignmentDepartment>()
                .Property(e => e.DepartmentId)
                .HasDatabaseGeneratedOption(DatabaseGeneratedOption.None)
                .HasColumnName("department_id")
                .HasColumnType("int")
                .HasColumnOrder(2);
            modelBuilder.Entity<AssignmentDepartment>()
                .Property(e => e.Created)
                .HasColumnName("created")
                .HasColumnType("datetime2")
                .HasColumnOrder(3);
            modelBuilder.Entity<AssignmentDepartment>()
                .Property(e => e.Updated)
                .HasColumnName("updated")
                .HasColumnType("datetime2")
                .HasColumnOrder(4);
        }

        protected virtual void InitializeAssignmentEligibilityFields(DbModelBuilder modelBuilder)
        {
            modelBuilder.Entity<AssignmentEligibility>()
                .ToTable("assignment_eligibility", "model")
                .HasKey(x => new { f1 = x.AssignmentId, f2 = x.EligibilityId });
            modelBuilder.Entity<AssignmentEligibility>()
                .HasRequired(x => x.Eligibility)
                .WithMany()
                .HasForeignKey(x => x.EligibilityId);
            modelBuilder.Entity<AssignmentEligibility>()
                .Property(e => e.AssignmentId)
                .HasDatabaseGeneratedOption(DatabaseGeneratedOption.None)
                .HasColumnName("assignment_id")
                .HasColumnType("int")
                .HasColumnOrder(1);
            modelBuilder.Entity<AssignmentEligibility>()
                .Property(e => e.EligibilityId)
                .HasDatabaseGeneratedOption(DatabaseGeneratedOption.None)
                .HasColumnName("eligibility_id")
                .HasColumnType("int")
                .HasColumnOrder(2);
            modelBuilder.Entity<AssignmentEligibility>()
                .Property(e => e.Created)
                .HasColumnName("created")
                .HasColumnType("datetime2")
                .HasColumnOrder(3);
            modelBuilder.Entity<AssignmentEligibility>()
                .Property(e => e.Updated)
                .HasColumnName("updated")
                .HasColumnType("datetime2")
                .HasColumnOrder(4);
        }

        protected virtual void InitializePremiumFields(DbModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Premium>()
                .ToTable("premium", "model")
                .HasKey(x => x.PremiumId);
            modelBuilder.Entity<Premium>()
                .HasMany(x => x.Comments)
                .WithOptional()
                .HasForeignKey(x => x.PremiumId);
            modelBuilder.Entity<Premium>()
                .Property(e => e.PremiumId)
                .HasDatabaseGeneratedOption(DatabaseGeneratedOption.None)
                .HasColumnName("premium_id")
                .HasColumnType("int")
                .HasColumnOrder(1);
            modelBuilder.Entity<Premium>()
                .Property(e => e.PremiumType)
                .HasColumnName("premium_type")
                .HasColumnType("int")
                .HasColumnOrder(2);
            modelBuilder.Entity<Premium>()
                .Property(e => e.AssignmentId)
                .HasColumnName("assignment_id")
                .HasColumnType("int")
                .HasColumnOrder(3);
            modelBuilder.Entity<Premium>()
                .Property(e => e.Amount)
                .HasPrecision(18, 2)
                .HasColumnName("amount")
                .HasColumnType("decimal")
                .HasColumnOrder(4);
            modelBuilder.Entity<Premium>()
                .Property(e => e.Created)
                .HasColumnName("created")
                .HasColumnType("datetime2")
                .HasColumnOrder(5);
            modelBuilder.Entity<Premium>()
                .Property(e => e.Updated)
                .HasColumnName("updated")
                .HasColumnType("datetime2")
                .HasColumnOrder(6);
        }

        protected virtual void InitializeCoveredFields(DbModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Covered>()
                .ToTable("covered", "model")
                .HasKey(x => x.CoveredId);
            modelBuilder.Entity<Covered>()
                .Property(e => e.CoveredId)
                .HasDatabaseGeneratedOption(DatabaseGeneratedOption.None)
                .HasColumnName("covered_id")
                .HasColumnType("int")
                .HasColumnOrder(1);
            modelBuilder.Entity<Covered>()
                .Property(e => e.CoveredType)
                .HasColumnName("covered_type")
                .HasColumnType("int")
                .HasColumnOrder(2);
            modelBuilder.Entity<Covered>()
                .Property(e => e.AssignmentId)
                .HasColumnName("assignment_id")
                .HasColumnType("int")
                .HasColumnOrder(3);
            modelBuilder.Entity<Covered>()
                .Property(e => e.Headcount)
                .HasColumnName("headcount")
                .HasColumnType("int")
                .HasColumnOrder(4);
            modelBuilder.Entity<Covered>()
                .Property(e => e.Created)
                .HasColumnName("created")
                .HasColumnType("datetime2")
                .HasColumnOrder(5);
            modelBuilder.Entity<Covered>()
                .Property(e => e.Updated)
                .HasColumnName("updated")
                .HasColumnType("datetime2")
                .HasColumnOrder(6);
        }

        protected virtual void InitializeCommentFields(DbModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Comment>()
                .ToTable("comment", "model")
                .HasKey(x => x.CommentId);
            modelBuilder.Entity<Comment>()
                .Property(e => e.CommentId)
                .HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity)
                .HasColumnName("comment_id")
                .HasColumnType("int")
                .HasColumnOrder(1);
            modelBuilder.Entity<Comment>()
                .Property(e => e.CommentType)
                .HasColumnName("comment_type")
                .HasColumnType("int")
                .HasColumnOrder(2);
            modelBuilder.Entity<Comment>()
                .Property(e => e.PolicyId)
                .HasColumnName("policy_id")
                .HasColumnType("int")
                .HasColumnOrder(3);
            modelBuilder.Entity<Comment>()
                .Property(e => e.PremiumId)
                .HasColumnName("premium_id")
                .HasColumnType("int")
                .HasColumnOrder(4);
            modelBuilder.Entity<Comment>()
                .Property(e => e.CommentText)
                .IsRequired()
                .HasColumnName("comment_text")
                .HasColumnType("nvarchar")
                .HasColumnOrder(5);
            modelBuilder.Entity<Comment>()
                .Property(e => e.AuthorUserId)
                .HasColumnName("author_user_id")
                .HasColumnType("int")
                .HasColumnOrder(6);
            modelBuilder.Entity<Comment>()
                .Property(e => e.Created)
                .HasColumnName("created")
                .HasColumnType("datetime2")
                .HasColumnOrder(7);
            modelBuilder.Entity<Comment>()
                .Property(e => e.Updated)
                .HasColumnName("updated")
                .HasColumnType("datetime2")
                .HasColumnOrder(8);
        }
    }
}
