//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace StormTestProject
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;
    using System.ComponentModel.DataAnnotations.Schema;
    using System.Linq;
    using St.Orm;
    using St.Orm.Interfaces;

    [Table("stats.calculation")]
    public partial class Calculation : ICloneable<Calculation>
    {
        [Key]
        [Column("calculation_id", Order = 1)]
        public Guid CalculationId { get;set; }

        [MaxLength(256)]
        [Column("name", Order = 2)]
        public string Name { get;set; }

        [Column("due_date", Order = 3)]
        public DateTime? DueDate { get;set; }

        #region Navigation properties
        public virtual ICollection<CalculationDetails> CalculationDetailses
        {
            #region implementation
            get
            {
                if(populated[0] || loadService == null)
                {
                    return field0;
                }

                Func<IQueryable<CalculationDetails>> query = () =>
                {
                    return loadService.Context.Set<CalculationDetails>()
                        .Join(sourceQuery, x => x.CalculationId, x => x.CalculationId, (x, y) => x);
                };
                var items = loadService.GetProperty<CalculationDetails, CalculationDetails, Guid>(0, query, x => x.CalculationId, CalculationId);
                if (clonedFrom == null)
                {
                    field0 = items;
                }
                else
                {
                    clonedFrom.CalculationDetailses = items;
                    field0 = new List<CalculationDetails>(items.Count);
                    var repo = loadService.Context.GetDalRepository<CalculationDetails, CalculationDetails>();
                    foreach(var item in items)
                    {
                        field0.Add(repo.Clone(item));
                    }
                }

                populated[0] = true;
                return field0;
            }
            set
            {
                field0 = value;
                populated[0] = true;
            }
            #endregion
        }

        #endregion

        #region Private fields
        private readonly bool[] populated;
        private readonly ILoadService loadService;
        IQueryable<Calculation> sourceQuery;
        private readonly Calculation clonedFrom;
        private ICollection<CalculationDetails> field0;
        #endregion

        #region Constructors
        public Calculation(Calculation clonedFrom, IQueryable<Calculation> sourceQuery, ILoadService loadService)
        {
            this.clonedFrom = clonedFrom;
            this.loadService = loadService;
            this.sourceQuery = sourceQuery;
            populated = new bool[1];
        }

        public Calculation(IQueryable<Calculation> sourceQuery, ILoadService loadService)
        {
            this.loadService = loadService;
            this.sourceQuery = sourceQuery;
            populated = new bool[1];
        }

        public Calculation()
        {
            field0 = new HashSet<CalculationDetails>();
            populated = new bool[]{true};
        }
        #endregion

        #region ICloneable implementation
        Calculation ICloneable<Calculation>.Clone()
        {
            return new Calculation(this, sourceQuery, loadService)
            {
                CalculationId = CalculationId,
                Name = Name,
                DueDate = DueDate,
            };
        }

        Calculation ICloneable<Calculation>.ClonedFrom()
        {
            return clonedFrom;
        }

        bool[] ICloneable<Calculation>.GetPopulated()
        {
            return populated;
        }
        #endregion
    }
}
