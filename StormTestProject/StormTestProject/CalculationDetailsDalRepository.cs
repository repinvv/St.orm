//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace StormTestProject
{
    using System;
    using System.Collections.Generic;
    using System.Data;
    using System.Linq;
    using St.Orm;
    using St.Orm.Interfaces;

    internal class CalculationDetailsDalRepository : IDalRepository<CalculationDetails, CalculationDetails>
    {
        private IDalRepositoryExtension<CalculationDetails> extension;

        public CalculationDetailsDalRepository()
        {
            extension = new EmptyRepositoryExtension<CalculationDetails>();
        }

        public void SetExtension(IDalRepositoryExtension<CalculationDetails> extension)
        {
            this.extension = extension;
        }

        public int RelationsCount()
        {
            return extension.RelationsCount() ?? 0;
        }

        public CalculationDetails Clone(CalculationDetails source)
        {
            var clone = new CalculationDetails(source)
            {
                CalculationDetailsId = source.CalculationDetailsId,
                CalculationId = source.CalculationId,
                Year = source.Year,
                Month = source.Month,
                Value = source.Value,
            };
            extension.ExtendClone(clone, source);
            return clone;
        }

        public CalculationDetails Create(IDataReader reader, ILoadService loadService)
        {
            var entity = new CalculationDetails(loadService)
            {
                CalculationDetailsId = reader.GetGuid(0),
                CalculationId = reader.GetGuid(1),
                Year = reader.GetInt32(2),
                Month = reader.GetInt32(3),
                Value = reader.GetDecimal(4),
            };
            extension.ExtendCreate(entity, reader);
            return entity;
        }

        public List<CalculationDetails> Materialize(IQueryable<CalculationDetails> query, ILoadService loadService)
        {
            var context = loadService.Context;
            return AdoCommands.Materialize(query as IQueryable<CalculationDetails>,
                reader => Create(reader, loadService),
                context.Connection,
                context.Transaction);
        }
    }
}
