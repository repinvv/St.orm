//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace StormTestProject
{
    using System;
    using System.Collections.Generic;
    using System.Data;
    using System.Linq;
    using St.Orm;
    using St.Orm.Implementation;
    using St.Orm.Interfaces;

    internal class CountryDalRepository : IDalRepository<Country, Country>
    {
        private IDalRepositoryExtension<Country> extension;

        public CountryDalRepository()
        {
            extension = new EmptyRepositoryExtension<Country>();
        }

        public void SetExtension(IDalRepositoryExtension<Country> extension)
        {
            this.extension = extension;
        }

        public int RelationsCount()
        {
            return extension.RelationsCount() ?? 1;
        }

        public Country Create(IDataReader reader, IQueryable<Country> query, ILoadService loadService)
        {
            var entity = new Country(query, loadService)
            {
                CountryId = reader.GetInt32(0),
                Name = reader[1] as string,
                CountryCode = reader[2] as string,
                Created = reader.GetDateTime(3),
                Updated = reader.GetDateTime(4),
            };
            extension.ExtendCreate(entity, reader);
            return entity;
        }

        public Country Clone(Country source)
        {
            var clone = (source as ICloneable<Country>).Clone();
            extension.ExtendClone(clone, source);
            return clone;
        }

        public List<Country> Materialize(IQueryable<Country> query, ILoadService loadService)
        {
            var context = loadService.Context;
            return AdoCommands.Materialize(query,
                reader => Create(reader, query, loadService),
                context.Connection,
                context.Transaction);
        }

        public IQueryable<Country> GetByIdQuery(object id, IStormContext context)
        {
            var key = (int)id;
            return context.Set<Country>().Where(x => x.CountryId == key);
        }

        public void Save(Country entity, ISavesCollector saves)
        {
            if(!extension.PreSave(entity))
            {
                return;
            }

            SetMtoFields(entity);
            saves.Save<Country, Country>(entity);
        }

        public void Update(Country entity, Country existing, ISavesCollector saves)
        {
            if(!extension.PreUpdate(entity, existing))
            {
                Delete(entity, saves);
                return;
            }

            SetMtoFields(entity);
            if (EntityChanged(entity, existing))
            {
                saves.Update<Country, Country>(entity, existing);
            }
            else
            {
                saves.NoUpdate<Country, Country>(entity, existing);
            }
        }

        public void Delete(Country entity, ISavesCollector saves)
        {
            if(!extension.PreDelete(entity))
            {
                return;
            }

            DeleteRelations(entity, saves);
            saves.Delete<Country, Country>(entity);
        }

        public void SaveRelations(Country entity, ISavesCollector saves)
        {
            if (entity.Policies != null)
            {
                foreach (var field in entity.Policies)
                {
                    field.CountryId = entity.CountryId;
                }
            }

            SaveService.Save<Policy, Policy>(entity.Policies, saves);

            extension.ExtendSaveRelations(entity, saves);
        }

        public void UpdateRelations(Country entity, Country existing, ISavesCollector saves)
        {
            var populated = (entity as ICloneable<Policy>).GetPopulated();
            if(populated[0])
            {
                if (entity.Policies != null)
                {
                    foreach (var field in entity.Policies)
                    {
                        field.CountryId = entity.CountryId;
                    }
                }

                SaveService.Update<Policy, Policy>(entity.Policies, existing.Policies, saves);
            }

            extension.ExtendSaveRelations(entity, saves);
        }

        private void DeleteRelations(Country entity, ISavesCollector saves)
        {
            SaveService.Delete<Policy, Policy>(entity.Policies, saves);
        }

        private void SetMtoFields(Country entity)
        {
        }

        public bool EntityChanged(Country entity, Country existing)
        {
            return extension.ExtendEntityChanged(entity, existing)
                || entity.Name != existing.Name
                || entity.CountryCode != existing.CountryCode
                || entity.Created != existing.Created
                || entity.Updated != existing.Updated;
        }
    }
}
