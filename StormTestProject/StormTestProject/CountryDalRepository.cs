//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace StormTestProject
{
    using System;
    using System.Collections.Generic;
    using System.Data;
    using System.Linq;
    using St.Orm;
    using St.Orm.Interfaces;

    internal class CountryDalRepository : IDalRepository<Country, Country>
    {
        private IDalRepositoryExtension<Country> extension;

        public CountryDalRepository()
        {
            extension = new EmptyRepositoryExtension<Country>();
        }

        public void SetExtension(IDalRepositoryExtension<Country> extension)
        {
            this.extension = extension;
        }

        public int RelationsCount()
        {
            return extension.RelationsCount() ?? 1;
        }

        public Country Clone(Country source)
        {
            var clone = new Country(source)
            {
                CountryId = source.CountryId,
                Name = source.Name,
                CountryCode = source.CountryCode,
                Created = source.Created,
                Updated = source.Updated,
            };
            extension.ExtendClone(clone, source);
            return clone;
        }

        public Country Create(IDataReader reader, ILoadService loadService)
        {
            var entity = new Country(loadService)
            {
                CountryId = reader.GetInt32(0),
                Name = reader[1] as string,
                CountryCode = reader[2] as string,
                Created = reader.GetDateTime(3),
                Updated = reader.GetDateTime(4),
            };
            extension.ExtendCreate(entity, reader);
            return entity;
        }

        public List<Country> Materialize(IQueryable<Country> query, ILoadService loadService)
        {
            var context = loadService.Context;
            return AdoCommands.Materialize(query as IQueryable<Country>,
                reader => Create(reader, loadService),
                context.Connection,
                context.Transaction);
        }
    }
}
