//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace StormTestProject
{
    using System;
    using System.Collections.Generic;
    using System.Data;
    using System.Data.Common;
    using System.Data.SqlClient;
    using System.Linq;
    using System.Text;
    using St.Orm;
    using St.Orm.Implementation;
    using St.Orm.Interfaces;

    internal class AssignmentDepartmentDalRepository : IDalRepository<AssignmentDepartment, AssignmentDepartment>
    {
        private IDalRepositoryExtension<AssignmentDepartment> extension;

        public AssignmentDepartmentDalRepository()
        {
            extension = new EmptyRepositoryExtension<AssignmentDepartment>();
        }

        public void SetExtension(IDalRepositoryExtension<AssignmentDepartment> extension)
        {
            this.extension = extension;
        }

        public int RelationsCount()
        {
            return extension.RelationsCount() ?? 1;
        }

        public AssignmentDepartment Create(IDataReader reader, IQueryable<AssignmentDepartment> query, ILoadService loadService)
        {
            var entity = new AssignmentDepartment(query, loadService)
            {
                AssignmentId = reader.GetInt32(0),
                DepartmentId = reader.GetInt32(1),
                Created = reader.GetDateTime(2),
                Updated = reader.GetDateTime(3),
            };
            extension.ExtendCreate(entity, reader);
            return entity;
        }

        public AssignmentDepartment Clone(AssignmentDepartment source)
        {
            var clone = (source as ICloneable<AssignmentDepartment>).Clone();
            extension.ExtendClone(clone, source);
            return clone;
        }

        public List<AssignmentDepartment> Materialize(IQueryable<AssignmentDepartment> query, ILoadService loadService)
        {
            var context = loadService.Context;
            return AdoCommands.Materialize(query,
                reader => Create(reader, query, loadService),
                context.Connection,
                context.Transaction);
        }

        public IQueryable<AssignmentDepartment> GetByIdQuery(object id, IStormContext context)
        {
            throw new Exception("Get by id is only available for entities with single primary key field.");
        }

        public void Save(AssignmentDepartment entity, ISavesCollector saves)
        {
            if(!extension.PreSave(entity))
            {
                return;
            }

            SetMtoFields(entity);
            saves.Save<AssignmentDepartment, AssignmentDepartment>(entity);
        }

        public void Update(AssignmentDepartment entity, AssignmentDepartment existing, ISavesCollector saves)
        {
            if(!extension.PreUpdate(entity, existing))
            {
                Delete(entity, saves);
                return;
            }

            SetMtoFields(entity);
            if (EntityChanged(entity, existing))
            {
                saves.Update<AssignmentDepartment, AssignmentDepartment>(entity, existing);
            }
            else
            {
                saves.NoUpdate<AssignmentDepartment, AssignmentDepartment>(entity, existing);
            }
        }

        public void Delete(AssignmentDepartment entity, ISavesCollector saves)
        {
            if(!extension.PreDelete(entity))
            {
                return;
            }

            DeleteRelations(entity, saves);
            saves.Delete<AssignmentDepartment, AssignmentDepartment>(entity);
        }

        public void SaveRelations(AssignmentDepartment entity, ISavesCollector saves)
        {
            extension.ExtendSaveRelations(entity, saves);
        }

        public void UpdateRelations(AssignmentDepartment entity, AssignmentDepartment existing, ISavesCollector saves)
        {
            var populated = (entity as ICloneable<Policy>).GetPopulated();
            extension.ExtendSaveRelations(entity, saves);
        }

        private void DeleteRelations(AssignmentDepartment entity, ISavesCollector saves)
        {
        }

        private void SetMtoFields(AssignmentDepartment entity)
        {
            if(entity.Department != null)
            {
                entity.DepartmentId = entity.Department.DepartmentId;
            }
        }

        public bool EntityChanged(AssignmentDepartment entity, AssignmentDepartment existing)
        {
            return extension.ExtendEntityChanged(entity, existing)
                || entity.Created != existing.Created
                || entity.Updated != existing.Updated;
        }

        public void Insert(IStormContext context, IList<AssignmentDepartment> entities)
        {
        }
    }
}
