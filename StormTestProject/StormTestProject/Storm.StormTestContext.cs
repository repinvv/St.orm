//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace StormTestProject
{
    using System.Data.Entity;
    using St.Orm.Interfaces;

    public partial class StormTestContext : DbContext
    {
        public StormTestContext() : base("name=StormTestContext") { }

        public virtual DbSet<Department> Departments { get; set; }

        public virtual DbSet<Eligibility> Eligibilities { get; set; }

        public virtual DbSet<Currency> Currencies { get; set; }

        public virtual DbSet<Country> Countries { get; set; }

        public virtual DbSet<Calculation> Calculations { get; set; }

        public virtual DbSet<CalculationDetails> CalculationDetailses { get; set; }

        public virtual DbSet<Policy> Policies { get; set; }

        public virtual DbSet<Tax> Taxes { get; set; }

        public virtual DbSet<Assignment> Assignments { get; set; }

        public virtual DbSet<AssignmentDepartment> AssignmentDepartments { get; set; }

        public virtual DbSet<AssignmentEligibility> AssignmentEligibilities { get; set; }

        public virtual DbSet<Premium> Premiums { get; set; }

        public virtual DbSet<Covered> Covereds { get; set; }

        public virtual DbSet<Comment> Comments { get; set; }

        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            InitializeCurrencyRelations(modelBuilder);
            InitializeCountryRelations(modelBuilder);
            InitializeCalculationRelations(modelBuilder);
            InitializePolicyRelations(modelBuilder);
            InitializeAssignmentRelations(modelBuilder);
            InitializeAssignmentDepartmentRelations(modelBuilder);
            InitializeAssignmentEligibilityRelations(modelBuilder);
            InitializePremiumRelations(modelBuilder);
        }

        protected virtual void InitializeCurrencyRelations(DbModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Currency>()
                .HasMany(x => x.Policies)
                .WithRequired()
                .HasForeignKey(x => x.CurrencyId);
        }

        protected virtual void InitializeCountryRelations(DbModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Country>()
                .HasMany(x => x.Policies)
                .WithOptional(x => x.Country)
                .HasForeignKey(x => x.CountryId);
        }

        protected virtual void InitializeCalculationRelations(DbModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Calculation>()
                .HasMany(x => x.CalculationDetailses)
                .WithRequired()
                .HasForeignKey(x => x.CalculationId);
        }

        protected virtual void InitializePolicyRelations(DbModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Policy>()
                .HasMany(x => x.Taxes)
                .WithRequired()
                .HasForeignKey(x => x.PolicyId);
            modelBuilder.Entity<Policy>()
                .HasMany(x => x.Assignments)
                .WithRequired()
                .HasForeignKey(x => x.PolicyId);
            modelBuilder.Entity<Policy>()
                .HasMany(x => x.Comments)
                .WithOptional()
                .HasForeignKey(x => x.PolicyId);
        }

        protected virtual void InitializeAssignmentRelations(DbModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Assignment>()
                .HasMany(x => x.Premiums)
                .WithRequired()
                .HasForeignKey(x => x.AssignmentId);
            modelBuilder.Entity<Assignment>()
                .HasMany(x => x.Covereds)
                .WithRequired()
                .HasForeignKey(x => x.AssignmentId);
        }

        protected virtual void InitializeAssignmentDepartmentRelations(DbModelBuilder modelBuilder)
        {
            modelBuilder.Entity<AssignmentDepartment>()
                .HasRequired(x => x.Department)
                .WithMany()
                .HasForeignKey(x => x.DepartmentId);
        }

        protected virtual void InitializeAssignmentEligibilityRelations(DbModelBuilder modelBuilder)
        {
            modelBuilder.Entity<AssignmentEligibility>()
                .HasRequired(x => x.Eligibility)
                .WithMany()
                .HasForeignKey(x => x.EligibilityId);
        }

        protected virtual void InitializePremiumRelations(DbModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Premium>()
                .HasMany(x => x.Comments)
                .WithOptional()
                .HasForeignKey(x => x.PremiumId);
        }
    }
}
