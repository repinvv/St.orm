//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace StormTestProject
{
    using System;
    using System.Collections.Generic;
    using System.Data;
    using System.Linq;
    using St.Orm;
    using St.Orm.Interfaces;

    internal class CoverageDepartmentDalRepository : IDalRepository<CoverageDepartment, CoverageDepartment>
    {
        private IDalRepositoryExtension<CoverageDepartment> extension;

        public CoverageDepartmentDalRepository()
        {
            extension = new EmptyRepositoryExtension<CoverageDepartment>();
        }

        public void SetExtension(IDalRepositoryExtension<CoverageDepartment> extension)
        {
            this.extension = extension;
        }

        public int RelationsCount()
        {
            return extension.RelationsCount() ?? 1;
        }

        public CoverageDepartment Clone(CoverageDepartment source)
        {
            var clone = new CoverageDepartment(source)
            {
                CoverageId = source.CoverageId,
                DepartmentId = source.DepartmentId,
            };
            extension.ExtendClone(clone, source);
            return clone;
        }

        public CoverageDepartment Create(IDataReader reader, ILoadService loadService)
        {
            var entity = new CoverageDepartment(loadService)
            {
                CoverageId = reader.GetInt32(0),
                DepartmentId = reader.GetInt32(1),
            };
            extension.ExtendCreate(entity, reader);
            return entity;
        }

        public List<CoverageDepartment> Materialize(IQueryable<CoverageDepartment> query, ILoadService loadService)
        {
            var context = loadService.Context;
            return AdoCommands.Materialize(query as IQueryable<CoverageDepartment>,
                reader => Create(reader, loadService),
                context.Connection,
                context.Transaction);
        }
    }
}
