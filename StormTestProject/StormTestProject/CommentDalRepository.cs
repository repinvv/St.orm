//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace StormTestProject
{
    using System;
    using System.Collections.Generic;
    using System.Data;
    using System.Linq;
    using St.Orm;
    using St.Orm.Interfaces;

    internal class CommentDalRepository : IDalRepository<Comment, Comment>
    {
        private IDalRepositoryExtension<Comment> extension;

        public CommentDalRepository()
        {
            extension = new EmptyRepositoryExtension<Comment>();
        }

        public void SetExtension(IDalRepositoryExtension<Comment> extension)
        {
            this.extension = extension;
        }

        public int RelationsCount()
        {
            return extension.RelationsCount() ?? 0;
        }

        public Comment Clone(Comment source)
        {
            var clone = new Comment(source)
            {
                CommentId = source.CommentId,
                CommentType = source.CommentType,
                PolicyId = source.PolicyId,
                PremiumId = source.PremiumId,
                CommentText = source.CommentText,
                AuthorUserId = source.AuthorUserId,
                Created = source.Created,
                Updated = source.Updated,
            };
            extension.ExtendClone(clone, source);
            return clone;
        }

        public Comment Create(IDataReader reader, ILoadService loadService)
        {
            var entity = new Comment(loadService)
            {
                CommentId = reader.GetInt32(0),
                CommentType = reader.GetInt32(1),
                PolicyId = reader[2] as int?,
                PremiumId = reader[3] as int?,
                CommentText = reader[4] as string,
                AuthorUserId = reader.GetInt32(5),
                Created = reader.GetDateTime(6),
                Updated = reader.GetDateTime(7),
            };
            extension.ExtendCreate(entity, reader);
            return entity;
        }

        public List<Comment> Materialize(IQueryable<Comment> query, ILoadService loadService)
        {
            var context = loadService.Context;
            return AdoCommands.Materialize(query as IQueryable<Comment>,
                reader => Create(reader, loadService),
                context.Connection,
                context.Transaction);
        }
    }
}
