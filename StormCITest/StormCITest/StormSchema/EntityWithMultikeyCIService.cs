//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace StormTestProject.StormSchema
{
    using System;
    using System.Data.SqlClient;
	using System.Collections.Generic;

    public class EntityWithMultikeyCiService : ICiService<EntityWithMultikey>
    {
        private List<EntityWithMultikey> ReadEntities(SqlDataReader reader)
        {
            var list = new List<EntityWithMultikey>();
            while (reader.Read())
            {
                var entity = new EntityWithMultikey();
                entity.Id1 = reader.GetInt32(0);
                entity.Id2 = reader.GetString(1);
                entity.Content = reader.IsDBNull(2) ? null : reader.GetString(2);
                list.Add(entity);
            }
            return list;
        }

        public List<EntityWithMultikey> Materialize(string query, 
                            SqlParameter[] parms, 
                            SqlConnection conn, 
                            SqlTransaction trans)
        {
            using (new ConnectionHandler(conn))
            {
                return CiHelper.ExecuteSelect(query, parms, ReadEntities, conn, trans);
            }
        }

        #region KeyDataReader
        private class KeyDataReader : BaseDataReader
        {
            int[] key0;
            string[] key1;
            public KeyDataReader(Tuple<int[], string[]> keys) : base(keys.Item1.Length)
            {
                key0 = keys.Item1;
                key1 = keys.Item2;
            }

            public override object GetValue(int i)
            {
                switch(i)
                {
                    case 0:
					    return key0[current];
                    case 1:
					    return key1[current];
                    default:
                        throw new Exception("No key with index " + i);
                }
            }

            public override int FieldCount { get { return 2; } }
        }
        #endregion

        public List<EntityWithMultikey> GetByPrimaryKey(object ids, SqlConnection conn, SqlTransaction trans)
        {
            var idsTuple = (Tuple<int[], string[]>)ids;
            using (new ConnectionHandler(conn))
            {
                var table = CiHelper.CreateTempTableName();
                CreateIdTempTable(table, conn, trans);
                CiHelper.BulkInsert(new KeyDataReader(idsTuple), table, conn, trans);
                var sql = @"select 
                e.id_1, e.id_2, e.content
				from entity_with_multikey e
                inner join " + table + @" t on 
                e.id_1 = t.id_1 AND e.id_2 = t.id_2";
                var result = CiHelper.ExecuteSelect(sql, new SqlParameter[0], ReadEntities, conn, trans);
                CiHelper.DropTable(table, conn, trans);
                return result;
            }
        }

		private void CreateIdTempTable(string table, SqlConnection conn, SqlTransaction trans)
        {
            var sql = "CREATE TABLE " + table + @"(
                id_1 int
                id_2 nvarchar(256)
                )";
            CiHelper.ExecuteNonQuery(sql, new SqlParameter[0], conn, trans);
        }
    }
}
