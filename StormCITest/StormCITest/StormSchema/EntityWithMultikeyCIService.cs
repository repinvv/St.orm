//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace StormTestProject.StormSchema
{
    using System;
    using System.Data;
    using System.Data.SqlClient;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;

    public class EntityWithMultikeyCiService : ICiService<EntityWithMultikey>
    {
        private List<EntityWithMultikey> ReadEntities(SqlDataReader reader)
        {
            var list = new List<EntityWithMultikey>();
            while (reader.Read())
            {
                var entity = new EntityWithMultikey
                {
                    Id1 = reader.GetInt32(0),
                    Id2 = reader.GetString(1),
                    Content = reader.IsDBNull(2) ? null : reader.GetString(2),
                };
                list.Add(entity);
            }
            return list;
        }

        public List<EntityWithMultikey> Get(string query, 
            SqlParameter[] parms, 
            SqlConnection conn, 
            SqlTransaction trans)
        {
            using (new ConnectionHandler(conn))
            {
                return CiHelper.ExecuteSelect(query, parms, ReadEntities, conn, trans);
            }
        }

        #region KeyDataReader
        private class KeyDataReader : BaseDataReader
        {
            int[] key0;
            string[] key1;
            public KeyDataReader(int[] key0, string[] key1) : base(key0.Length)
            {
                this.key0 = key0;
                this.key1 = key1;
            }

            public override object GetValue(int i)
            {
                return i == 0 ? key0[current] as object : key1[current];
            }

            public override int FieldCount { get { return 2; } }
        }
        #endregion

        public List<EntityWithMultikey> GetByPrimaryKey(object ids, SqlConnection conn, SqlTransaction trans)
        {
            var idsArray = (object[])ids;
            var key0 = (int[])idsArray[0];
            var key1 = (string[])idsArray[1];
            using (new ConnectionHandler(conn))
            {
                var table = CiHelper.CreateTempTableName();
                CreateIdTempTable(table, conn, trans);
                var dataReader = new KeyDataReader(key0, key1);
                CiHelper.BulkInsert(dataReader, table, conn, trans);
                var sql = @"select 
                e.id_1, e.id_2, e.content
                from entity_with_multikey e
                inner join " + table + @" t on 
                e.id_1 = t.id_1 AND e.id_2 = t.id_2";
                var result = CiHelper.ExecuteSelect(sql, new SqlParameter[0], ReadEntities, conn, trans);
                CiHelper.DropTable(table, conn, trans);
                return result;
            }
        }

        private void CreateIdTempTable(string table, SqlConnection conn, SqlTransaction trans)
        {
            var sql = "CREATE TABLE " + table + @"(
                id_1 int,
                id_2 nvarchar(256)
                )";
            CiHelper.ExecuteNonQuery(sql, new SqlParameter[0], conn, trans);
        }

        #region EntityDataReader
        internal class EntityDataReader : BaseDataReader
        {
            private readonly List<EntityWithMultikey> entities;

            public EntityDataReader(List<EntityWithMultikey> entities) : base(entities.Count)
            {
                this.entities = entities;
            }

            public override object GetValue(int i)
            {
                switch(i)
                {
                    case 0:
                        return entities[current].Id1;
                    case 1:
                        return entities[current].Id2;
                    case 2:
                        return entities[current].Content;
                    default:
                        throw new Exception("EntityWithMultikey Can't read field " + i);
                }
            }

            public override int FieldCount { get { return 3; } }
        }
        #endregion

        public static int MinAmountForBulk = 10;

        public void Insert(List<EntityWithMultikey> entities, SqlConnection conn, SqlTransaction trans)
        {
            using (new ConnectionHandler(conn))
            {
                if(entities.Count >= MinAmountForBulk)
                {
                    CiHelper.BulkInsert(new EntityDataReader(entities), "entity_with_multikey", conn, trans );
                }
                else
                {
                    RangeInsert(entities, conn, trans);
                }
            }
        }

        #region range insert methods
        private void RangeInsert(List<EntityWithMultikey> entities, SqlConnection conn, SqlTransaction trans)
        {
            int i = 0;
            var parms = entities.SelectMany(x => GetInsertParameters(x, i++)).ToArray();
            var sql = ConstructInsertRequest(entities.Count);
            CiHelper.ExecuteNonQuery(sql, parms, conn, trans);
        }

        private string insertRequestCache;
        private int insertCacheLength;

        private string ConstructInsertRequest(int count)
        {
            if(insertCacheLength == count) return insertRequestCache;

            var sb = new StringBuilder();
            sb.AppendLine("INSERT INTO entity_with_multikey");
            sb.AppendLine("(");
            sb.AppendLine("id_1, id_2, content");
            sb.AppendLine(") VALUES");

            AppendInsertKeys(sb, 0);
            for (int i = 1; i < count; i++)
            {
                sb.AppendLine("), ");
                AppendInsertKeys(sb, i);
            }
            
            sb.AppendLine(")");
            insertCacheLength = count;
            return insertRequestCache = sb.ToString();
        }

        private void AppendInsertKeys(StringBuilder sb, int i)
        {
                sb.Append("( @parm0i"); sb.Append(i);
                sb.Append(", @parm1i"); sb.Append(i);
                sb.Append(", @parm2i"); sb.Append(i);
        }

        private IEnumerable<SqlParameter> GetInsertParameters(EntityWithMultikey entity, int i)
        {
            yield return new SqlParameter("parm0i" + i, entity.Id1);
            yield return new SqlParameter("parm1i" + i, entity.Id2);
            yield return new SqlParameter("parm2i" + i, entity.Content ?? (object)DBNull.Value);
        }
        #endregion
    }
}
