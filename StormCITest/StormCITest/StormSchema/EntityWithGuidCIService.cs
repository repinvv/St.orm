//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace StormTestProject.StormSchema
{
    using System;
    using System.Data;
    using System.Data.SqlClient;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;

    public class EntityWithGuidCiService : ICiService<EntityWithGuid>
    {
        private List<EntityWithGuid> ReadEntities(SqlDataReader reader)
        {
            var list = new List<EntityWithGuid>();
            while (reader.Read())
            {
                var entity = new EntityWithGuid
                {
                    Id = reader.GetGuid(0),
                    AFloat = reader.IsDBNull(1) ? (double?)null : reader.GetDouble(1),
                    AReal = reader.GetFloat(2),
                    ADate = reader.IsDBNull(3) ? (DateTime?)null : reader.GetDateTime(3),
                    ATime = reader.IsDBNull(4) ? (TimeSpan?)null : reader.GetTimeSpan(4),
                    AOffset = reader.IsDBNull(5) ? (DateTimeOffset?)null : reader.GetDateTimeOffset(5),
                    ADatetime = reader.IsDBNull(6) ? (DateTime?)null : reader.GetDateTime(6),
                    ADatetime2 = reader.IsDBNull(7) ? (DateTime?)null : reader.GetDateTime(7),
                    ASmalldatetime = reader.IsDBNull(8) ? (DateTime?)null : reader.GetDateTime(8),
                };
                list.Add(entity);
            }
            return list;
        }

        public List<EntityWithGuid> Get(string query, 
            SqlParameter[] parms, 
            SqlConnection conn, 
            SqlTransaction trans)
        {
            using (new ConnectionHandler(conn))
            {
                return CiHelper.ExecuteSelect(query, parms, ReadEntities, conn, trans);
            }
        }

        public List<EntityWithGuid> GetByPrimaryKey(object ids, SqlConnection conn, SqlTransaction trans)
        {
            var idsArray = (Guid[])ids;
            using (new ConnectionHandler(conn))
            {
                var table = CiHelper.CreateTempTableName();
                CreateIdTempTable(table, conn, trans);
                CiHelper.BulkInsert(new SingleKeyDataReader<Guid>(idsArray), table, conn, trans);
                var sql = @"select 
                e.id, e.a_float, e.a_real, e.a_date, e.a_time,
                e.a_offset, e.a_datetime, e.a_datetime2, e.a_smalldatetime
                from entity_with_guid e
                inner join " + table + @" t on 
                e.id = t.id";
                var result = CiHelper.ExecuteSelect(sql, new SqlParameter[0], ReadEntities, conn, trans);
                CiHelper.DropTable(table, conn, trans);
                return result;
            }
        }

        private void CreateIdTempTable(string table, SqlConnection conn, SqlTransaction trans)
        {
            var sql = "CREATE TABLE " + table + " ( id uniqueidentifier )";
            CiHelper.ExecuteNonQuery(sql, new SqlParameter[0], conn, trans);
        }

        #region EntityDataReader
        internal class EntityDataReader : BaseDataReader
        {
            private readonly List<EntityWithGuid> entities;

            public EntityDataReader(List<EntityWithGuid> entities) : base(entities.Count)
            {
                this.entities = entities;
            }

            public override object GetValue(int i)
            {
                switch(i)
                {
                    case 0:
                        return entities[current].Id;
                    case 1:
                        return entities[current].AFloat;
                    case 2:
                        return entities[current].AReal;
                    case 3:
                        return entities[current].ADate;
                    case 4:
                        return entities[current].ATime;
                    case 5:
                        return entities[current].AOffset;
                    case 6:
                        return entities[current].ADatetime;
                    case 7:
                        return entities[current].ADatetime2;
                    case 8:
                        return entities[current].ASmalldatetime;
                    default:
                        throw new Exception("EntityWithGuid Can't read field " + i);
                }
            }

            public override int FieldCount { get { return 9; } }
        }
        #endregion

        public static int MinAmountForBulk = 10;

        public void Insert(List<EntityWithGuid> entities, SqlConnection conn, SqlTransaction trans)
        {
            using (new ConnectionHandler(conn))
            {
                if(entities.Count >= MinAmountForBulk)
                {
                    CiHelper.BulkInsert(new EntityDataReader(entities), "entity_with_guid", conn, trans );
                }
                else
                {
                    RangeInsert(entities, conn, trans);
                }
            }
        }

        #region range insert methods
        private void RangeInsert(List<EntityWithGuid> entities, SqlConnection conn, SqlTransaction trans)
        {
            int i = 0;
            var parms = entities.SelectMany(x => GetInsertParameters(x, i++)).ToArray();
            var sql = ConstructInsertRequest(entities.Count);
            CiHelper.ExecuteNonQuery(sql, parms, conn, trans);
        }

        private string insertRequestCache;
        private int insertCacheLength;

        private string ConstructInsertRequest(int count)
        {
            if(insertCacheLength == count) return insertRequestCache;

            var sb = new StringBuilder();
            sb.AppendLine("INSERT INTO entity_with_guid");
            sb.AppendLine("(");
            sb.AppendLine("id, a_float, a_real, a_date, a_time,");
            sb.AppendLine("a_offset, a_datetime, a_datetime2, a_smalldatetime");
            sb.AppendLine(") VALUES");

            AppendInsertKeys(sb, 0);
            for (int i = 1; i < count; i++)
            {
                sb.AppendLine("), ");
                AppendInsertKeys(sb, i);
            }
            
            sb.AppendLine(")");
            insertCacheLength = count;
            return insertRequestCache = sb.ToString();
        }

        private void AppendInsertKeys(StringBuilder sb, int i)
        {
                sb.Append("( @parm0i"); sb.Append(i);
                sb.Append(", @parm1i"); sb.Append(i);
                sb.Append(", @parm2i"); sb.Append(i);
                sb.Append(", @parm3i"); sb.Append(i);
                sb.Append(", @parm4i"); sb.Append(i);
                sb.Append(", @parm5i"); sb.Append(i);
                sb.Append(", @parm6i"); sb.Append(i);
                sb.Append(", @parm7i"); sb.Append(i);
                sb.Append(", @parm8i"); sb.Append(i);
        }

        private IEnumerable<SqlParameter> GetInsertParameters(EntityWithGuid entity, int i)
        {
            yield return new SqlParameter("parm0i" + i, entity.Id);
            yield return new SqlParameter("parm1i" + i, entity.AFloat ?? (object)DBNull.Value);
            yield return new SqlParameter("parm2i" + i, entity.AReal);
            yield return new SqlParameter("parm3i" + i, entity.ADate ?? (object)DBNull.Value);
            yield return new SqlParameter("parm4i" + i, entity.ATime ?? (object)DBNull.Value);
            yield return new SqlParameter("parm5i" + i, entity.AOffset ?? (object)DBNull.Value);
            yield return new SqlParameter("parm6i" + i, entity.ADatetime ?? (object)DBNull.Value);
            yield return new SqlParameter("parm7i" + i, entity.ADatetime2 ?? (object)DBNull.Value);
            yield return new SqlParameter("parm8i" + i, entity.ASmalldatetime ?? (object)DBNull.Value);
        }
        #endregion

        public void Insert(EntityWithGuid entity, SqlConnection conn, SqlTransaction trans)
        {        
            using(new ConnectionHandler(conn))
            {
                var sql = ConstructInsertRequest(1);
                var parms = GetInsertParameters(entity, 0).ToArray();
                CiHelper.ExecuteNonQuery(sql, parms, conn, trans);
            }
        }
    }
}
