//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace StormTestProject.StormSchema
{
    using System;
    using System.Data;
    using System.Data.SqlClient;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;

    public class EntityWithGuidCiService : ICiService<EntityWithGuid>
    {
        #region internal artefacts
        private List<EntityWithGuid> ReadEntities(SqlDataReader reader)
        {
            var list = new List<EntityWithGuid>();
            while (reader.Read())
            {
                var entity = new EntityWithGuid
                {
                    Id = reader.GetGuid(0),
                    AFloat = reader.IsDBNull(1) ? (double?)null : reader.GetDouble(1),
                    AReal = reader.GetFloat(2),
                    ADate = reader.IsDBNull(3) ? (DateTime?)null : reader.GetDateTime(3),
                    ATime = reader.IsDBNull(4) ? (TimeSpan?)null : reader.GetTimeSpan(4),
                    AOffset = reader.IsDBNull(5) ? (DateTimeOffset?)null : reader.GetDateTimeOffset(5),
                    ADatetime = reader.IsDBNull(6) ? (DateTime?)null : reader.GetDateTime(6),
                    ADatetime2 = reader.IsDBNull(7) ? (DateTime?)null : reader.GetDateTime(7),
                    ASmalldatetime = reader.IsDBNull(8) ? (DateTime?)null : reader.GetDateTime(8),
                };
                list.Add(entity);
            }
            return list;
        }

        internal class EntityDataReader : BaseDataReader
        {
            private readonly List<EntityWithGuid> entities;

            public EntityDataReader(List<EntityWithGuid> entities) : base(entities.Count)
            {
                this.entities = entities;
            }

            public override object GetValue(int i)
            {
                switch(i)
                {
                    case 0:
                        return entities[current].Id;
                    case 1:
                        return entities[current].AFloat;
                    case 2:
                        return entities[current].AReal;
                    case 3:
                        return entities[current].ADate;
                    case 4:
                        return entities[current].ATime;
                    case 5:
                        return entities[current].AOffset;
                    case 6:
                        return entities[current].ADatetime;
                    case 7:
                        return entities[current].ADatetime2;
                    case 8:
                        return entities[current].ASmalldatetime;
                    default:
                        throw new Exception("EntityWithGuid Can't read field " + i);
                }            
            }

            public override int FieldCount { get { return 9; } }
        }

        internal class EntityKeyDataReader : BaseDataReader
        {
            private readonly List<EntityWithGuid> entities;

            public EntityKeyDataReader(List<EntityWithGuid> entities) : base(entities.Count)
            {
                this.entities = entities;
            }

            public override object GetValue(int i)
            {
                return entities[current].Id;
            }

            public override int FieldCount { get { return 1; } }
        }

        private void CreateIdTempTable(string table, SqlConnection conn, SqlTransaction trans)
        {
            var sql = "CREATE TABLE " + table + " ( id uniqueidentifier )";
            CiHelper.ExecuteNonQuery(sql, CiHelper.NoParameters, conn, trans);
        }

        private void CreateTempTable(string table, SqlConnection conn, SqlTransaction trans)
        {
            var sql = "CREATE TABLE " + table + @"(
                id uniqueidentifier,
                a_float float,
                a_real real,
                a_date date,
                a_time time,
                a_offset datetimeoffset,
                a_datetime datetime,
                a_datetime2 datetime2,
                a_smalldatetime smalldatetime
                )";
            CiHelper.ExecuteNonQuery(sql, CiHelper.NoParameters, conn, trans);
        }
        #endregion

        #region Get
        public List<EntityWithGuid> Get(string query, 
            SqlParameter[] parms, 
            SqlConnection conn, 
            SqlTransaction trans)
        {
            return CiHelper.ExecuteSelect(query, parms, ReadEntities, conn, trans);
        }

        public static int MaxAmountForWhereIn = 300;

        public List<EntityWithGuid> GetByPrimaryKey(object ids, SqlConnection conn, SqlTransaction trans)
        {
            var idsArray = (Guid[])ids;
            return idsArray.Length > MaxAmountForWhereIn
                ? GetByTempTable(idsArray, conn, trans)
                : GetByWhereIn(idsArray, conn, trans);
        }

        #region getByPrimaryKey internal methods
        private List<EntityWithGuid> GetByWhereIn(Guid[] idsArray, SqlConnection conn, SqlTransaction trans)
        {
            var whereIn = string.Join(", ", idsArray.Select((x,i) => "@arg" + i));
            var parms = idsArray.Select((x, i) => new SqlParameter("@arg" + i, x)).ToArray();
            var sql = @"select
                id, a_float, a_real, a_date, a_time,
                a_offset, a_datetime, a_datetime2, a_smalldatetime
            from entity_with_guid where id in (" + whereIn + ")";
            return CiHelper.ExecuteSelect(sql, parms, ReadEntities, conn, trans);
        }

        private List<EntityWithGuid> GetByTempTable(Guid[] idsArray, SqlConnection conn, SqlTransaction trans)
        {
            var table = CiHelper.CreateTempTableName();
            CreateIdTempTable(table, conn, trans);
            CiHelper.BulkInsert(new SingleKeyDataReader<Guid>(idsArray), table, conn, trans);
            var sql = @"select 
    e.id, e.a_float, e.a_real, e.a_date, e.a_time,
    e.a_offset, e.a_datetime, e.a_datetime2, e.a_smalldatetime
  from entity_with_guid e
  inner join " + table + @" t on 
    e.id = t.id;
drop table " + table + ";";
            return CiHelper.ExecuteSelect(sql, CiHelper.NoParameters, ReadEntities, conn, trans);
        }
        #endregion
        #endregion

        #region insert
        public static int MaxAmountForGroupedInsert = 12;

        public void Insert(List<EntityWithGuid> entities, SqlConnection conn, SqlTransaction trans)
        {
            if(entities.Count > MaxAmountForGroupedInsert)
            {
                CiHelper.BulkInsert(new EntityDataReader(entities), "entity_with_guid", conn, trans );
            }
            else
            {
                GroupInsert(entities, conn, trans);
            }
        }

        public void Insert(EntityWithGuid entity, SqlConnection conn, SqlTransaction trans)
        {
            var sql = ConstructInsertRequest(1);
            var parms = GetInsertParameters(entity, 0).ToArray();
            CiHelper.ExecuteNonQuery(sql, parms, conn, trans);
        }

        #region group insert methods
        private void GroupInsert(List<EntityWithGuid> entities, SqlConnection conn, SqlTransaction trans)
        {
            var parms = entities.SelectMany((x, i) => GetInsertParameters(x, i)).ToArray();
            var sql = ConstructInsertRequest(entities.Count);
            CiHelper.ExecuteNonQuery(sql, parms, conn, trans);
        }

        private string insertRequestCache;
        private int insertCacheLength;
        private const string SingleInsertRequest = @"INSERT INTO entity_with_guid (
  id, a_float, a_real, a_date, a_time,
  a_offset, a_datetime, a_datetime2, a_smalldatetime
)  VALUES
  @parm0i0,
  @parm1i0,
  @parm2i0,
  @parm3i0,
  @parm4i0,
  @parm5i0,
  @parm6i0,
  @parm7i0,
  @parm8i0)";

        private string ConstructInsertRequest(int count)
        {
            if(insertCacheLength == count) return insertRequestCache;

            var sb = new StringBuilder();
            sb.AppendLine("INSERT INTO entity_with_guid");
            sb.AppendLine("(");
            sb.AppendLine("id, a_float, a_real, a_date, a_time,");
            sb.AppendLine("a_offset, a_datetime, a_datetime2, a_smalldatetime");
            sb.AppendLine(") VALUES");

            AppendInsertKeys(sb, 0);
            for (int i = 1; i < count; i++)
            {
                sb.AppendLine("), ");
                AppendInsertKeys(sb, i);
            }
            
            sb.AppendLine(")");
            insertCacheLength = count;
            return insertRequestCache = sb.ToString();
        }

        private void AppendInsertKeys(StringBuilder sb, int i)
        {
                sb.Append("( @parm0i"); sb.Append(i);
                sb.Append(", @parm1i"); sb.Append(i);
                sb.Append(", @parm2i"); sb.Append(i);
                sb.Append(", @parm3i"); sb.Append(i);
                sb.Append(", @parm4i"); sb.Append(i);
                sb.Append(", @parm5i"); sb.Append(i);
                sb.Append(", @parm6i"); sb.Append(i);
                sb.Append(", @parm7i"); sb.Append(i);
                sb.Append(", @parm8i"); sb.Append(i);
        }

        private SqlParameter[] GetInsertParameters(EntityWithGuid entity, int i)
        {
            return new[]
            {
                new SqlParameter("parm0i" + i, SqlDbType.UniqueIdentifier)
                { Value = entity.Id },
                new SqlParameter("parm1i" + i, SqlDbType.Float)
                { Value = entity.AFloat ?? (object)DBNull.Value },
                new SqlParameter("parm2i" + i, SqlDbType.Real)
                { Value = entity.AReal },
                new SqlParameter("parm3i" + i, SqlDbType.Date)
                { Value = entity.ADate ?? (object)DBNull.Value },
                new SqlParameter("parm4i" + i, SqlDbType.Time)
                { Value = entity.ATime ?? (object)DBNull.Value },
                new SqlParameter("parm5i" + i, SqlDbType.DateTimeOffset)
                { Value = entity.AOffset ?? (object)DBNull.Value },
                new SqlParameter("parm6i" + i, SqlDbType.DateTime)
                { Value = entity.ADatetime ?? (object)DBNull.Value },
                new SqlParameter("parm7i" + i, SqlDbType.DateTime2)
                { Value = entity.ADatetime2 ?? (object)DBNull.Value },
                new SqlParameter("parm8i" + i, SqlDbType.SmallDateTime)
                { Value = entity.ASmalldatetime ?? (object)DBNull.Value },
            };
        }
        #endregion
        #endregion

        #region update
        public void Update(EntityWithGuid entity, SqlConnection conn, SqlTransaction trans)
        {
            var parms = GetUpdateParameters(entity, 0);
            var sql = GetUpdateRequest(0);
            CiHelper.ExecuteNonQuery(sql, parms, conn, trans);
        }

        public static int MaxAmountForGroupedUpdate = 40;

        public void Update(List<EntityWithGuid> entities, SqlConnection conn, SqlTransaction trans)
        {
            if (entities.Count > MaxAmountForGroupedUpdate)
            {
                BulkUpdate(entities, conn, trans);
            }
            else
            {
                GroupUpdate(entities, conn, trans);
            }
        }

        #region update methods
        private const string SingleUpdateRequest = @"UPDATE entity_with_guid SET
    a_float = @parm0i0,
    a_real = @parm1i0,
    a_date = @parm2i0,
    a_time = @parm3i0,
    a_offset = @parm4i0,
    a_datetime = @parm5i0,
    a_datetime2 = @parm6i0,
    a_smalldatetime = @parm7i0
  WHERE id = @parm8i0;";

        private void BulkUpdate(List<EntityWithGuid> entities, SqlConnection conn, SqlTransaction trans)
        {
            var table = CiHelper.CreateTempTableName();
            CreateTempTable(table, conn, trans);
            CiHelper.BulkInsert(new EntityDataReader(entities), table, conn, trans);
            var sql = @"UPDATE entity_with_guid SET
    a_float = s.a_float,
    a_real = s.a_real,
    a_date = s.a_date,
    a_time = s.a_time,
    a_offset = s.a_offset,
    a_datetime = s.a_datetime,
    a_datetime2 = s.a_datetime2,
    a_smalldatetime = s.a_smalldatetime
  FROM entity_with_guid src
  INNER JOIN " + table + @" s on
    src.id = s.id;
drop table " + table + ";";
            CiHelper.ExecuteNonQuery(sql, new SqlParameter[0], conn, trans);
        }

        private void GroupUpdate(List<EntityWithGuid> entities, SqlConnection conn, SqlTransaction trans)
        {
            var parms = entities.SelectMany((x, i) => GetUpdateParameters(x, i)).ToArray();
            var sql = ConstructUpdateRequest(entities.Count);
            CiHelper.ExecuteNonQuery(sql, parms, conn, trans);
        }

        private SqlParameter[] GetUpdateParameters(EntityWithGuid entity, int i)
        {
            return new[]
            {
                new SqlParameter("parm0i" + i, SqlDbType.Float)
                { Value = entity.AFloat ?? (object)DBNull.Value },
                new SqlParameter("parm1i" + i, SqlDbType.Real)
                { Value = entity.AReal },
                new SqlParameter("parm2i" + i, SqlDbType.Date)
                { Value = entity.ADate ?? (object)DBNull.Value },
                new SqlParameter("parm3i" + i, SqlDbType.Time)
                { Value = entity.ATime ?? (object)DBNull.Value },
                new SqlParameter("parm4i" + i, SqlDbType.DateTimeOffset)
                { Value = entity.AOffset ?? (object)DBNull.Value },
                new SqlParameter("parm5i" + i, SqlDbType.DateTime)
                { Value = entity.ADatetime ?? (object)DBNull.Value },
                new SqlParameter("parm6i" + i, SqlDbType.DateTime2)
                { Value = entity.ADatetime2 ?? (object)DBNull.Value },
                new SqlParameter("parm7i" + i, SqlDbType.SmallDateTime)
                { Value = entity.ASmalldatetime ?? (object)DBNull.Value },
                new SqlParameter("parm8i" + i, SqlDbType.UniqueIdentifier)
                { Value = entity.Id },
            };
        }

        private string ConstructUpdateRequest(int count)
        {
            var sb = new StringBuilder();
            for (int i = 0; i < count; i++)
            {
                sb.AppendLine(GetUpdateRequest(i));
            }

            return sb.ToString();
        }

        private string GetUpdateRequest(int index)
        {
            return @"UPDATE entity_with_guid SET
    a_float = @parm0i" + index + @",
    a_real = @parm1i" + index + @",
    a_date = @parm2i" + index + @",
    a_time = @parm3i" + index + @",
    a_offset = @parm4i" + index + @",
    a_datetime = @parm5i" + index + @",
    a_datetime2 = @parm6i" + index + @",
    a_smalldatetime = @parm7i" + index + @"
  WHERE id = @parm8i" + index + ";";
        }
        #endregion
        #endregion

        #region delete
        public void Delete(EntityWithGuid entity, SqlConnection conn, SqlTransaction trans)
        {
            var parms = GetDeleteParameters(entity);
            CiHelper.ExecuteNonQuery(SingleDeleteRequest, parms, conn, trans);
        }

        public void Delete(List<EntityWithGuid> entities, SqlConnection conn, SqlTransaction trans)
        {
            if (entities.Count > MaxAmountForWhereIn)
            {
                DeleteByTempTable(entities, conn, trans);
            }
            else
            {
                DeleteByWhereIn(entities, conn, trans);
            }
        }

        public void DeleteByPrimaryKey(object ids, SqlConnection conn, SqlTransaction trans)
        { 
            var idsArray = (Guid[])ids;
            if (idsArray.Length > MaxAmountForWhereIn)
            {
                DeleteByTempTable(idsArray, conn, trans);
            }
            else
            {
                DeleteByWhereIn(idsArray, conn, trans);
            }
        }

        #region delete methods
        private const string SingleDeleteRequest = @"DELETE FROM entity_with_guid 
  WHERE id = @parm0i0;";

        private void DeleteByTempTable(List<EntityWithGuid> entities, SqlConnection conn, SqlTransaction trans)
        {
            var table = CiHelper.CreateTempTableName();
            CreateIdTempTable(table, conn, trans);
            CiHelper.BulkInsert(new EntityKeyDataReader(entities), table, conn, trans);
            var sql = @"delete e from entity_with_guid e
  inner join " + table + @" t on 
    e.id = t.id;
drop table " + table + ";";
            CiHelper.ExecuteNonQuery(sql, CiHelper.NoParameters, conn, trans);
        }

        private void DeleteByWhereIn(List<EntityWithGuid> entities, SqlConnection conn, SqlTransaction trans)
        {
            var whereIn = string.Join(", ", entities.Select((x, i) => "@arg" + i));
            var parms = entities.Select((x, i) => new SqlParameter("@arg" + i, x.Id)).ToArray();
            var sql = @"delete from entity_with_guid where id in (" + whereIn + ")";
            CiHelper.ExecuteNonQuery(sql, parms, conn, trans);
        }

        private void DeleteByTempTable(Guid[] idsArray, SqlConnection conn, SqlTransaction trans)
        {
            var table = CiHelper.CreateTempTableName();
            CreateIdTempTable(table, conn, trans);
            CiHelper.BulkInsert(new SingleKeyDataReader<Guid>(idsArray), table, conn, trans);
            var sql = @"delete e from entity_with_guid e
  inner join " + table + @" t on 
    e.id = t.id;
drop table " + table + ";";
            CiHelper.ExecuteNonQuery(sql, CiHelper.NoParameters, conn, trans);         
        }

        private void DeleteByWhereIn(Guid[] idsArray, SqlConnection conn, SqlTransaction trans)
        { 
            var whereIn = string.Join(", ", idsArray.Select((x, i) => "@arg" + i));
            var parms = idsArray.Select((x, i) => new SqlParameter("@arg" + i, x)).ToArray();
            var sql = @"delete from entity_with_guid where id in (" + whereIn + ")";
            CiHelper.ExecuteNonQuery(sql, parms, conn, trans);
        }

        private SqlParameter[] GetDeleteParameters(EntityWithGuid entity)
        {
            return new[]
            {
            new SqlParameter("parm0i0", SqlDbType.UniqueIdentifier)
                { Value = entity.Id },
            };
        }      
        #endregion
        #endregion
    }
}
