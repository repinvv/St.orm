//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace StormTestProject.StormSchema
{
    using System;
    using System.Data;
    using System.Data.SqlClient;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using SomeSchema;

    public class EntityWithSequenceCiService : ICiService<EntityWithSequence>
    {
        private List<EntityWithSequence> ReadEntities(SqlDataReader reader)
        {
            var list = new List<EntityWithSequence>();
            while (reader.Read())
            {
                var entity = new EntityWithSequence();
                entity.Id = reader.GetInt32(0);
                entity.AChar = reader.IsDBNull(1) ? null : reader.GetString(1);
                entity.AVarchar = reader.GetString(2);
                entity.AText = reader.IsDBNull(3) ? null : reader.GetString(3);
                entity.ANchar = reader.IsDBNull(4) ? null : reader.GetString(4);
                entity.ANvarchar = reader.IsDBNull(5) ? null : reader.GetString(5);
                entity.ANtext = reader.IsDBNull(6) ? null : reader.GetString(6);
                entity.AXml = reader.IsDBNull(7) ? null : reader.GetString(7);
                entity.ABinary = reader.IsDBNull(8) ? null : reader.ReadBytes(8);
                entity.AVarbinary = reader.IsDBNull(9) ? null : reader.ReadBytes(9);
                entity.AImage = reader.IsDBNull(10) ? null : reader.ReadBytes(10);
                list.Add(entity);
            }
            return list;
        }

        public List<EntityWithSequence> Get(string query, 
            SqlParameter[] parms, 
            SqlConnection conn, 
            SqlTransaction trans)
        {
            using (new ConnectionHandler(conn))
            {
                return CiHelper.ExecuteSelect(query, parms, ReadEntities, conn, trans);
            }
        }

        public List<EntityWithSequence> GetByPrimaryKey(object ids, SqlConnection conn, SqlTransaction trans)
        {
            var idsArray = (int[])ids;
            using (new ConnectionHandler(conn))
            {
                var table = CiHelper.CreateTempTableName();
                CreateIdTempTable(table, conn, trans);
                CiHelper.BulkInsert(new SingleKeyDataReader<int>(idsArray), table, conn, trans);
                var sql = @"select 
                e.id, e.a_char, e.a_varchar, e.a_text, e.a_nchar, e.a_nvarchar,
                e.a_ntext, e.a_xml, e.a_binary, e.a_varbinary, e.a_image
                from some_schema.entity_with_sequence e
                inner join " + table + @" t on 
                e.id = t.id";
                var result = CiHelper.ExecuteSelect(sql, new SqlParameter[0], ReadEntities, conn, trans);
                CiHelper.DropTable(table, conn, trans);
                return result;
            }
        }

        private void CreateIdTempTable(string table, SqlConnection conn, SqlTransaction trans)
        {
            var sql = "CREATE TABLE " + table + " ( id int )";
            CiHelper.ExecuteNonQuery(sql, new SqlParameter[0], conn, trans);
        }

        #region EntityDataReader
        internal class EntityDataReader : BaseDataReader
        {
            private readonly List<EntityWithSequence> entities;

            public EntityDataReader(List<EntityWithSequence> entities) : base(entities.Count)
            {
                this.entities = entities;
            }

            public override object GetValue(int i)
            {
                switch(i)
                {
                    case 0:
                        return entities[current].Id;
                    case 1:
                        return entities[current].AChar;
                    case 2:
                        return entities[current].AVarchar;
                    case 3:
                        return entities[current].AText;
                    case 4:
                        return entities[current].ANchar;
                    case 5:
                        return entities[current].ANvarchar;
                    case 6:
                        return entities[current].ANtext;
                    case 7:
                        return entities[current].AXml;
                    case 8:
                        return entities[current].ABinary;
                    case 9:
                        return entities[current].AVarbinary;
                    case 10:
                        return entities[current].AImage;
                    default:
                        throw new Exception("EntityWithSequence Can't read field " + i);
                }
            }

            public override int FieldCount { get { return 11; } }
        }
        #endregion

        public void Insert(List<EntityWithSequence> entities, SqlConnection conn, SqlTransaction trans)
        {
            using (new ConnectionHandler(conn))
            {
                CiHelper.BulkInsert(new EntityDataReader(entities), "some_schema.entity_with_sequence", conn, trans );
            }
        }
    }
}
