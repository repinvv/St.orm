//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace StormTestProject.StormSchema
{
    using System;
    using System.Data;
    using System.Data.SqlClient;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using SomeSchema;

    public class EntityWithSequenceCiService : ICiService<EntityWithSequence>
    {
        private List<EntityWithSequence> ReadEntities(SqlDataReader reader)
        {
            var list = new List<EntityWithSequence>();
            while (reader.Read())
            {
                var entity = new EntityWithSequence
                {
                    Id = reader.GetInt32(0),
                    AChar = reader.IsDBNull(1) ? null : reader.GetString(1),
                    AVarchar = reader.GetString(2),
                    AText = reader.IsDBNull(3) ? null : reader.GetString(3),
                    ANchar = reader.IsDBNull(4) ? null : reader.GetString(4),
                    ANvarchar = reader.IsDBNull(5) ? null : reader.GetString(5),
                    ANtext = reader.IsDBNull(6) ? null : reader.GetString(6),
                    AXml = reader.IsDBNull(7) ? null : reader.GetString(7),
                    ABinary = reader.IsDBNull(8) ? null : reader.ReadBytes(8),
                    AVarbinary = reader.IsDBNull(9) ? null : reader.ReadBytes(9),
                    AImage = reader.IsDBNull(10) ? null : reader.ReadBytes(10),
                };
                list.Add(entity);
            }
            return list;
        }

        public List<EntityWithSequence> Get(string query, 
            SqlParameter[] parms, 
            SqlConnection conn, 
            SqlTransaction trans)
        {
            using (new ConnectionHandler(conn))
            {
                return CiHelper.ExecuteSelect(query, parms, ReadEntities, conn, trans);
            }
        }

        public static int MaxAmountForWhereIn = 300;

        public List<EntityWithSequence> GetByPrimaryKey(object ids, SqlConnection conn, SqlTransaction trans)
        {
            var idsArray = (int[])ids;
            using (new ConnectionHandler(conn))
            {
                return idsArray.Length > MaxAmountForWhereIn
                    ? GetByTempTable(idsArray, conn, trans)
                    : GetByWhereIn(idsArray, conn, trans);
            }
        }

        #region getByPrimaryKey internal methods
        private List<EntityWithSequence> GetByWhereIn(int[] idsArray, SqlConnection conn, SqlTransaction trans)
        {
            var whereIn = string.Join(", ", idsArray.Select((x,i) => "@arg" + i));
            var parms = idsArray.Select((x, i) => new SqlParameter("@arg" + i, x)).ToArray();
            var sql = @"select
                id, a_char, a_varchar, a_text, a_nchar, a_nvarchar,
                a_ntext, a_xml, a_binary, a_varbinary, a_image
            from some_schema.entity_with_sequence where id in (" + whereIn + ")";
            return CiHelper.ExecuteSelect(sql, parms, ReadEntities, conn, trans);
        }

        private List<EntityWithSequence> GetByTempTable(int[] idsArray, SqlConnection conn, SqlTransaction trans)
        {
                var table = CiHelper.CreateTempTableName();
                CreateIdTempTable(table, conn, trans);
                CiHelper.BulkInsert(new SingleKeyDataReader<int>(idsArray), table, conn, trans);
                var sql = @"select 
                e.id, e.a_char, e.a_varchar, e.a_text, e.a_nchar, e.a_nvarchar,
                e.a_ntext, e.a_xml, e.a_binary, e.a_varbinary, e.a_image
                from some_schema.entity_with_sequence e
                inner join " + table + @" t on 
                e.id = t.id";
                var result = CiHelper.ExecuteSelect(sql, new SqlParameter[0], ReadEntities, conn, trans);
                CiHelper.DropTable(table, conn, trans);
                return result;
        }

        private void CreateIdTempTable(string table, SqlConnection conn, SqlTransaction trans)
        {
            var sql = "CREATE TABLE " + table + " ( id int )";
            CiHelper.ExecuteNonQuery(sql, new SqlParameter[0], conn, trans);
        }
        #endregion

        #region EntityDataReader
        internal class EntityDataReader : BaseDataReader
        {
            private readonly List<EntityWithSequence> entities;

            public EntityDataReader(List<EntityWithSequence> entities) : base(entities.Count)
            {
                this.entities = entities;
            }

            public override object GetValue(int i)
            {
                switch(i)
                {
                    case 0:
                        return entities[current].Id;
                    case 1:
                        return entities[current].AChar;
                    case 2:
                        return entities[current].AVarchar;
                    case 3:
                        return entities[current].AText;
                    case 4:
                        return entities[current].ANchar;
                    case 5:
                        return entities[current].ANvarchar;
                    case 6:
                        return entities[current].ANtext;
                    case 7:
                        return entities[current].AXml;
                    case 8:
                        return entities[current].ABinary;
                    case 9:
                        return entities[current].AVarbinary;
                    case 10:
                        return entities[current].AImage;
                    default:
                        throw new Exception("EntityWithSequence Can't read field " + i);
                }
            }

            public override int FieldCount { get { return 11; } }
        }
        #endregion

        public static int MaxAmountForGroupedInsert = 12;

        public void Insert(List<EntityWithSequence> entities, SqlConnection conn, SqlTransaction trans)
        {
            using (new ConnectionHandler(conn))
            {
                if(entities.Count > MaxAmountForGroupedInsert)
                {
                    var seq = CiHelper.GetSequenceValues("some_schema.entity_seq", entities.Count, conn, trans);
                    entities.ForEach(x => x.Id = (int)(seq++));
                    CiHelper.BulkInsert(new EntityDataReader(entities), "some_schema.entity_with_sequence", conn, trans );
                }
                else
                {
                    RangeInsert(entities, conn, trans);
                }
            }
        }

        #region range insert methods
        private void RangeInsert(List<EntityWithSequence> entities, SqlConnection conn, SqlTransaction trans)
        {
            int i = 0;
            var parms = entities.SelectMany(x => GetInsertParameters(x, i++)).ToArray();
            var sql = ConstructInsertRequest(entities.Count);
            CiHelper.ExecuteSelect(sql, parms, reader => ReadKey(reader, entities), conn, trans);
        }

        private List<EntityWithSequence> ReadKey(SqlDataReader reader, List<EntityWithSequence> entities)
        {
            int i = 0;
            while (reader.Read())
            {
                entities[i++].Id = reader.GetInt32(0);
            }

            return entities;
        }

        private string insertRequestCache;
        private int insertCacheLength;

        private string ConstructInsertRequest(int count)
        {
            if(insertCacheLength == count) return insertRequestCache;

            var sb = new StringBuilder();
            sb.AppendLine("INSERT INTO some_schema.entity_with_sequence");
            sb.AppendLine("(");
            sb.AppendLine("id, a_char, a_varchar, a_text, a_nchar, a_nvarchar,");
            sb.AppendLine("a_ntext, a_xml, a_binary, a_varbinary, a_image");
            sb.AppendLine(")OUTPUT inserted.id VALUES");

            AppendInsertKeys(sb, 0);
            for (int i = 1; i < count; i++)
            {
                sb.AppendLine("), ");
                AppendInsertKeys(sb, i);
            }
            
            sb.AppendLine(")");
            insertCacheLength = count;
            return insertRequestCache = sb.ToString();
        }

        private void AppendInsertKeys(StringBuilder sb, int i)
        {
                sb.Append("( NEXT VALUE FOR some_schema.entity_seq");
                sb.Append(",@parm0i"); sb.Append(i);
                sb.Append(",@parm1i"); sb.Append(i);
                sb.Append(",@parm2i"); sb.Append(i);
                sb.Append(",@parm3i"); sb.Append(i);
                sb.Append(",@parm4i"); sb.Append(i);
                sb.Append(",@parm5i"); sb.Append(i);
                sb.Append(",@parm6i"); sb.Append(i);
                sb.Append(",@parm7i"); sb.Append(i);
                sb.Append(",@parm8i"); sb.Append(i);
                sb.Append(",@parm9i"); sb.Append(i);
        }

        private IEnumerable<SqlParameter> GetInsertParameters(EntityWithSequence entity, int i)
        {
            yield return new SqlParameter("parm0i" + i, entity.AChar ?? (object)DBNull.Value);
            yield return new SqlParameter("parm1i" + i, entity.AVarchar);
            yield return new SqlParameter("parm2i" + i, entity.AText ?? (object)DBNull.Value);
            yield return new SqlParameter("parm3i" + i, entity.ANchar ?? (object)DBNull.Value);
            yield return new SqlParameter("parm4i" + i, entity.ANvarchar ?? (object)DBNull.Value);
            yield return new SqlParameter("parm5i" + i, entity.ANtext ?? (object)DBNull.Value);
            yield return new SqlParameter("parm6i" + i, entity.AXml ?? (object)DBNull.Value);
            yield return new SqlParameter("parm7i" + i, entity.ABinary ?? (object)DBNull.Value);
            yield return new SqlParameter("parm8i" + i, entity.AVarbinary ?? (object)DBNull.Value);
            yield return new SqlParameter("parm9i" + i, entity.AImage ?? (object)DBNull.Value);
        }
        #endregion

        public void Insert(EntityWithSequence entity, SqlConnection conn, SqlTransaction trans)
        {        
            using(new ConnectionHandler(conn))
            {
                var sql = ConstructInsertRequest(1);    
                var parms = GetInsertParameters(entity, 0).ToArray();
                Func<IDataReader, List<EntityWithSequence>> readId = reader =>
                    {
                        if(reader.Read()) entity.Id = reader.GetInt32(0);
                        return null;
                    };
                CiHelper.ExecuteSelect(sql, parms, readId, conn, trans);
            }
        }
    }
}
