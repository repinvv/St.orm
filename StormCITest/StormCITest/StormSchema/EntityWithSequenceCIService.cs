//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace StormTestProject.StormModel
{
    using System;
    using System.Data;
    using System.Data.SqlClient;
	using System.Collections.Generic;
    using SomeSchema;

    public class EntityWithSequenceCiService : ICiService<EntityWithSequence>
    {
        public List<EntityWithSequence> Materialize(string query, 
                            SqlParameter[] parms, 
                            SqlConnection conn, 
                            SqlTransaction trans)
        {
            Func<SqlDataReader, List<EntityWithSequence>> func = reader =>
            {
                var list = new List<EntityWithSequence>();
                while (reader.Read())
                {
                    var entity = new EntityWithSequence();
                    list.Add(PopulateFields(entity, reader));
                }
                return list;
            };
            return CiHelper.ExecuteSelect(query, parms, func, conn, trans);
        }

        private EntityWithSequence PopulateFields(EntityWithSequence entity, SqlDataReader reader)
        {
            entity.Id = reader.GetInt32(0);
            entity.AChar = reader.IsDBNull(1) ? null : reader.GetString(1);
            entity.AVarchar = reader.GetString(2);
            entity.AText = reader.IsDBNull(3) ? null : reader.GetString(3);
            entity.ANchar = reader.IsDBNull(4) ? null : reader.GetString(4);
            entity.ANvarchar = reader.IsDBNull(5) ? null : reader.GetString(5);
            entity.ANtext = reader.IsDBNull(6) ? null : reader.GetString(6);
            entity.AXml = reader.IsDBNull(7) ? null : reader.GetString(7);
            entity.ABinary = reader.IsDBNull(8) ? null : reader.ReadBytes(8, 1000);
            entity.AVarbinary = reader.IsDBNull(9) ? null : reader.ReadBytes(9, 2000);
            entity.AImage = reader.IsDBNull(10) ? null : reader.ReadBytes(10, 2147483647);
            return entity;
        }
    }
}
