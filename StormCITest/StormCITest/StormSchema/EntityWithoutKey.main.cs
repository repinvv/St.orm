//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace StormTestProject.StormSchema
{
	using System;

    public partial class EntityWithoutKey : IEquatable<EntityWithoutKey>
    {	
        public int Val { get; set; }

        public string Content { get; set; }

        public double? AFloat { get; set; }

        public float AReal { get; set; }

        public DateTime? ADate { get; set; }

        public long? ABigint { get; set; }

        public int AInt { get; set; }

        public decimal? ANumeric { get; set; }

        #region equality
        public override bool Equals(object obj)
        {
            return this == obj as EntityWithoutKey;		  
        }
			  
        public bool Equals(EntityWithoutKey other)
        {		
		    return this == other;
        }

        public override int GetHashCode()
        {
            return new int[]
            {
                Val.GetHashCode(),
                Content.GetHashCode(),
                AFloat.GetHashCode(),
                AReal.GetHashCode(),
                ADate.GetHashCode(),
                ABigint.GetHashCode(),
                AInt.GetHashCode(),
                ANumeric.GetHashCode(),
            }.CombineHashcodes();
        }

        public static bool operator ==(EntityWithoutKey left, EntityWithoutKey right)
        {
            return ReferenceEquals(left, right)
                || (left as object) != null 
                && (right as object) != null
                && left.Val == right.Val
                && left.Content == right.Content
                && left.AFloat == right.AFloat
                && left.AReal == right.AReal
                && left.ADate == right.ADate
                && left.ABigint == right.ABigint
                && left.AInt == right.AInt
                && left.ANumeric == right.ANumeric
		    ;
        }

        public static bool operator !=(EntityWithoutKey left, EntityWithoutKey right)
        {
            return !(left == right);
        }
        #endregion
    }
}
