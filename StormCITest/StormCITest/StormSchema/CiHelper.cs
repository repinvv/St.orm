//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace StormTestProject.StormSchema
{
    using System.Data.SqlClient;
    using System.Collections.Generic;
    using System;
    using System.Data;

    public static class CiHelper
    {
        const SqlBulkCopyOptions BulkOptions =
            SqlBulkCopyOptions.FireTriggers
            | SqlBulkCopyOptions.CheckConstraints
            | SqlBulkCopyOptions.KeepNulls
            | SqlBulkCopyOptions.KeepIdentity;

        public static int CombineHashcodes(this IEnumerable<int> hashcodes)
        {
            unchecked
            {
                int hash = 17;
                foreach (var hashcode in hashcodes)
                {
                    hash = hash * 31 + hashcode;
                }
			    
                return hash;
            }
        }

        public static byte[] ReadBytes(this SqlDataReader reader, int index)
        {
            int bufferSize = 1000;
            var buffers = new List<byte[]>();
            int start = 0;
            byte[] buffer = new byte[bufferSize];
            var retval = reader.GetBytes(index, start, buffer, 0, bufferSize);
            while (retval == bufferSize)
            {
                buffers.Add(buffer);
                buffer = new byte[bufferSize];
                start += bufferSize; 
                retval = reader.GetBytes(index, start, buffer, 0, bufferSize);
            }

            var outputSize = buffers.Count * bufferSize + retval;
            if (outputSize == 0)
            {
                return null;
            }

            var output = new byte[outputSize];
            start = 0;
            foreach (var buff in buffers)
            {
                Buffer.BlockCopy(buff, 0, output, start, bufferSize);
                start += bufferSize;
            }

            Buffer.BlockCopy(buffer, 0, output, start, (int)retval);
            return output;
        }

        public static List<T> ExecuteSelect<T>(string query, 
                                        SqlParameter[] parms, 
                                        Func<SqlDataReader, List<T>> func, 
                                        SqlConnection conn, 
                                        SqlTransaction trans)
        {
            using (var command = new SqlCommand(query, conn))
            {
                command.Transaction = trans;
                command.Parameters.AddRange(parms);
                using (var reader = command.ExecuteReader(CommandBehavior.SequentialAccess))
                {
                    return func(reader);
                }
            }
        }

        public static void ExecuteNonQuery(string query,
            SqlParameter[] parms,
            SqlConnection conn,
            SqlTransaction trans)
        {
            using (var command = new SqlCommand(query, conn))
            {
                command.Transaction = trans;
                command.Parameters.AddRange(parms);
                command.ExecuteNonQuery();
            }
        }

        public static void BulkInsert(IDataReader reader, string table, SqlConnection conn, SqlTransaction trans)
        {
            using (var bulk = new SqlBulkCopy(conn, BulkOptions, trans))
            {
                bulk.DestinationTableName = table;
                bulk.WriteToServer(reader);
            }
        }

        public static void DropTable(string table, SqlConnection conn, SqlTransaction trans)
        {
            var sql = "DROP TABLE " + table;
            ExecuteNonQuery(sql, new SqlParameter[0],  conn, trans);
        }

        public static string CreateTempTableName()
        {
            return "#a" + Guid.NewGuid().ToString("N");
        }

        public static IEnumerable<List<T>> SplitInGroupsBy<T>(this IEnumerable<T> source, int groupSize)
        {
            var collection = source as ICollection<T>;
            if (collection != null)
            {
                var batchCount = (collection.Count / groupSize) + (collection.Count % groupSize == 0 ? 0 : 1);
                groupSize = (collection.Count / batchCount) + (collection.Count % batchCount == 0 ? 0 : 1);
            }

            var list = new List<T>();
            foreach (T item in source)
            {
                list.Add(item);
                if (list.Count >= groupSize)
                {
                    yield return list;
                    list = new List<T>();
                }
            }

            if (list.Count > 0)
            {
                yield return list;
            }
        }
    }
}
