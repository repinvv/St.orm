//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace StormTestProject.StormSchema
{
    using System;
    using System.Data;
    using System.Data.SqlClient;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;

    public class SmallentityWithSequenceCiService : ICiService<SmallentityWithSequence>
    {
        private List<SmallentityWithSequence> ReadEntities(SqlDataReader reader)
        {
            var list = new List<SmallentityWithSequence>();
            while (reader.Read())
            {
                var entity = new SmallentityWithSequence
                {
                    Id = reader.GetInt32(0),
                    AChar = reader.IsDBNull(1) ? null : reader.GetString(1),
                    AVarchar = reader.GetString(2),
                    AText = reader.IsDBNull(3) ? null : reader.GetString(3),
                };
                list.Add(entity);
            }
            return list;
        }

        public List<SmallentityWithSequence> Get(string query, 
            SqlParameter[] parms, 
            SqlConnection conn, 
            SqlTransaction trans)
        {
            return CiHelper.ExecuteSelect(query, parms, ReadEntities, conn, trans);
        }

        #region EntityDataReader
        internal class EntityDataReader : BaseDataReader
        {
            private readonly List<SmallentityWithSequence> entities;

            public EntityDataReader(List<SmallentityWithSequence> entities) : base(entities.Count)
            {
                this.entities = entities;
            }

            public override object GetValue(int i)
            {
                switch(i)
                {
                    case 0:
                        return entities[current].Id;
                    case 1:
                        return entities[current].AChar;
                    case 2:
                        return entities[current].AVarchar;
                    case 3:
                        return entities[current].AText;
                    default:
                        throw new Exception("SmallentityWithSequence Can't read field " + i);
                }
            }

            public override int FieldCount { get { return 4; } }
        }
        #endregion

        public static int MaxAmountForWhereIn = 300;

        public List<SmallentityWithSequence> GetByPrimaryKey(object ids, SqlConnection conn, SqlTransaction trans)
        {
            var idsArray = (int[])ids;
            return idsArray.Length > MaxAmountForWhereIn
                ? GetByTempTable(idsArray, conn, trans)
                : GetByWhereIn(idsArray, conn, trans);
        }

        #region getByPrimaryKey internal methods
        private List<SmallentityWithSequence> GetByWhereIn(int[] idsArray, SqlConnection conn, SqlTransaction trans)
        {
            var whereIn = string.Join(", ", idsArray.Select((x,i) => "@arg" + i));
            var parms = idsArray.Select((x, i) => new SqlParameter("@arg" + i, x)).ToArray();
            var sql = @"select
                id, a_char, a_varchar, a_text
            from smallentity_with_sequence where id in (" + whereIn + ")";
            return CiHelper.ExecuteSelect(sql, parms, ReadEntities, conn, trans);
        }

        private List<SmallentityWithSequence> GetByTempTable(int[] idsArray, SqlConnection conn, SqlTransaction trans)
        {
                var table = CiHelper.CreateTempTableName();
                CreateIdTempTable(table, conn, trans);
                CiHelper.BulkInsert(new SingleKeyDataReader<int>(idsArray), table, conn, trans);
                var sql = @"select 
                e.id, e.a_char, e.a_varchar, e.a_text
                from smallentity_with_sequence e
                inner join " + table + @" t on 
                e.id = t.id";
                var result = CiHelper.ExecuteSelect(sql, CiHelper.NoParameters, ReadEntities, conn, trans);
                CiHelper.DropTable(table, conn, trans);
                return result;
        }

        private void CreateIdTempTable(string table, SqlConnection conn, SqlTransaction trans)
        {
            var sql = "CREATE TABLE " + table + " ( id int )";
            CiHelper.ExecuteNonQuery(sql, CiHelper.NoParameters, conn, trans);        }
        #endregion

        public static int MaxAmountForGroupedInsert = 36;

        public void Insert(List<SmallentityWithSequence> entities, SqlConnection conn, SqlTransaction trans)
        {
            if(entities.Count > MaxAmountForGroupedInsert)
            {
                var seq = CiHelper.GetSequenceValues<int>("smallentity_seq", entities.Count, conn, trans);
                entities.ForEach(x => x.Id = seq++);
                CiHelper.BulkInsert(new EntityDataReader(entities), "smallentity_with_sequence", conn, trans );
            }
            else
            {
                GroupInsert(entities, conn, trans);
            }
        }

        #region group insert methods
        private void GroupInsert(List<SmallentityWithSequence> entities, SqlConnection conn, SqlTransaction trans)
        {
            int i = 0;
            var parms = entities.SelectMany(x => GetInsertParameters(x, i++)).ToArray();
            var sql = ConstructInsertRequest(entities.Count);
            CiHelper.ExecuteSelect(sql, parms, reader => ReadKey(reader, entities), conn, trans);
        }

        private List<SmallentityWithSequence> ReadKey(SqlDataReader reader, List<SmallentityWithSequence> entities)
        {
            int i = 0;
            while (reader.Read())
            {
                entities[i++].Id = reader.GetInt32(0);
            }

            return entities;
        }

        private string insertRequestCache;
        private int insertCacheLength;

        private string ConstructInsertRequest(int count)
        {
            if(insertCacheLength == count) return insertRequestCache;

            var sb = new StringBuilder();
            sb.AppendLine("INSERT INTO smallentity_with_sequence");
            sb.AppendLine("(");
            sb.AppendLine("id, a_char, a_varchar, a_text");
            sb.AppendLine(")OUTPUT inserted.id VALUES");

            AppendInsertKeys(sb, 0);
            for (int i = 1; i < count; i++)
            {
                sb.AppendLine("), ");
                AppendInsertKeys(sb, i);
            }
            
            sb.AppendLine(")");
            insertCacheLength = count;
            return insertRequestCache = sb.ToString();
        }

        private void AppendInsertKeys(StringBuilder sb, int i)
        {
                sb.Append("( NEXT VALUE FOR smallentity_seq");
                sb.Append(", @parm0i"); sb.Append(i);
                sb.Append(", @parm1i"); sb.Append(i);
                sb.Append(", @parm2i"); sb.Append(i);
        }

        private IEnumerable<SqlParameter> GetInsertParameters(SmallentityWithSequence entity, int i)
        {
            yield return new SqlParameter("parm0i" + i, SqlDbType.Char)
                { Value = entity.AChar ?? (object)DBNull.Value };
            yield return new SqlParameter("parm1i" + i, SqlDbType.VarChar)
                { Value = entity.AVarchar };
            yield return new SqlParameter("parm2i" + i, SqlDbType.Text)
                { Value = entity.AText ?? (object)DBNull.Value };
        }
        #endregion

        public void Insert(SmallentityWithSequence entity, SqlConnection conn, SqlTransaction trans)
        {        
            var sql = ConstructInsertRequest(1);    
            var parms = GetInsertParameters(entity, 0).ToArray();
            Func<IDataReader, List<SmallentityWithSequence>> readId = reader =>
                {
                    if(reader.Read()) entity.Id = reader.GetInt32(0);
                    return null;
                };
            CiHelper.ExecuteSelect(sql, parms, readId, conn, trans);
        }

        public void Update(SmallentityWithSequence entity, SqlConnection conn, SqlTransaction trans)
        {
            var parms = GetUpdateParameters(entity, 0).ToArray();
            var sql = GetUpdateRequest(0);
            CiHelper.ExecuteNonQuery(sql, parms, conn, trans);
        }

        public static int MaxAmountForGroupedUpdate = 88;

        public void Update(List<SmallentityWithSequence> entities, SqlConnection conn, SqlTransaction trans)
        {
            if (entities.Count > MaxAmountForGroupedUpdate)
            {
                BulkUpdate(entities, conn, trans);
            }
            else
            {
                GroupUpdate(entities, conn, trans);
            }
        }

        #region update members
        private void BulkUpdate(List<SmallentityWithSequence> entities, SqlConnection conn, SqlTransaction trans)
        {
            var table = CiHelper.CreateTempTableName();
            CreateTempTable(table, conn, trans);
            CiHelper.BulkInsert(new EntityDataReader(entities), table, conn, trans);
            var sql = @"UPDATE smallentity_with_sequence SET
    a_char = s.a_char,
    a_varchar = s.a_varchar,
    a_text = s.a_text
  FROM smallentity_with_sequence src
  INNER JOIN " + table + @" s 
    ON src.id = s.id
";
            CiHelper.ExecuteNonQuery(sql, new SqlParameter[0], conn, trans);
            CiHelper.DropTable(table, conn, trans);
        }
        
        private void CreateTempTable(string table, SqlConnection conn, SqlTransaction trans)
        {
            var sql = "CREATE TABLE " + table + @"(
                id int,
                a_char char(1),
                a_varchar varchar(2000),
                a_text text
                )";
            CiHelper.ExecuteNonQuery(sql, CiHelper.NoParameters, conn, trans);
        }

        private void GroupUpdate(List<SmallentityWithSequence> entities, SqlConnection conn, SqlTransaction trans)
        {
            int i = 0;
            var parms = entities.SelectMany(x => GetUpdateParameters(x, i++)).ToArray();
            var sql = ConstructUpdateRequest(entities.Count);
            CiHelper.ExecuteNonQuery(sql, parms, conn, trans);
        }

        private IEnumerable<SqlParameter> GetUpdateParameters(SmallentityWithSequence entity, int i)
        {
            yield return new SqlParameter("parm0i" + i, SqlDbType.Char)
                { Value = entity.AChar ?? (object)DBNull.Value };
            yield return new SqlParameter("parm1i" + i, SqlDbType.VarChar)
                { Value = entity.AVarchar };
            yield return new SqlParameter("parm2i" + i, SqlDbType.Text)
                { Value = entity.AText ?? (object)DBNull.Value };
            yield return new SqlParameter("parm3i" + i, SqlDbType.Int)
                { Value = entity.Id };
        }

        private string ConstructUpdateRequest(int count)
        {
            var sb = new StringBuilder();
            for (int i = 0; i < count; i++)
            {
                sb.AppendLine(GetUpdateRequest(i));
            }

            return sb.ToString();
        }

        private string GetUpdateRequest(int index)
        {
            return @"UPDATE smallentity_with_sequence SET
    a_char = @parm0i" + index + @",
    a_varchar = @parm1i" + index + @",
    a_text = @parm2i" + index + @"
  WHERE id = @parm3i" + index + ";";
        }
        #endregion
    }
}
