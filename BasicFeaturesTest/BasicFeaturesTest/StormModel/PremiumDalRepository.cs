//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace BasicFeaturesTest.StormModel
{
    using System;
    using System.Collections.Generic;
    using System.Data;
    using System.Linq;

    internal class PremiumDalRepository : IDalRepository<Premium, Premium>
    {
        private IDalRepositoryExtension<Premium> extension;

        public PremiumDalRepository()
        {
            extension = new EmptyRepositoryExtension<Premium>();
        }

        public void SetExtension(IDalRepositoryExtension<Premium> extension)
        {
            this.extension = extension;
        }

        public int RelationsCount()
        {
            return extension.RelationsCount() ?? 1;
        }

        public Premium Create(IDataReader reader, IQueryable<Premium> query, ILoadService loadService)
        {
            var entity = new Premium(query, loadService)
            {
                PremiumId = reader.GetInt32(0),
                PremiumType = reader.GetInt32(1),
                AssignmentId = reader.GetInt32(2),
                Amount = reader.GetDecimal(3),
                Created = reader.GetDateTime(4),
                Updated = reader.GetDateTime(5),
            };
            extension.ExtendCreate(entity, reader);
            return entity;
        }

        public Premium Clone(Premium source)
        {
            var clone = (source as ICloneable<Premium>).Clone();
            extension.ExtendClone(clone, source);
            return clone;
        }

        public List<Premium> Materialize(IQueryable<Premium> query, ILoadService loadService)
        {
            var context = loadService.Context;
            return AdoCommands.Materialize(query,
                reader => Create(reader, query, loadService),
                context.Connection,
                context.Transaction);
        }

        public IQueryable<Premium> GetByIdQuery(object id, IStormContext context)
        {
            var key = (int)id;
            return context.Set<Premium>().Where(x => x.PremiumId == key);
        }

        public void Save(Premium entity, ISavesCollector saves)
        {
            if(!extension.PreSave(entity))
            {
                return;
            }

            SetMtoFields(entity);
            saves.Save<Premium, Premium>(entity);
        }

        public void Update(Premium entity, Premium existing, ISavesCollector saves)
        {
            if(!extension.PreUpdate(entity, existing))
            {
                Delete(entity, saves);
                return;
            }

            SetMtoFields(entity);
            if (EntityChanged(entity, existing))
            {
                saves.Update<Premium, Premium>(entity, existing);
            }
            else
            {
                saves.NoUpdate<Premium, Premium>(entity, existing);
            }
        }

        public void Delete(Premium entity, ISavesCollector saves)
        {
            if(!extension.PreDelete(entity))
            {
                return;
            }

            DeleteRelations(entity, saves);
            saves.Delete<Premium, Premium>(entity);
        }

        public void SaveRelations(Premium entity, ISavesCollector saves)
        {
            if (entity.Comments != null)
            {
                foreach (var field in entity.Comments)
                {
                    field.PremiumId = entity.PremiumId;
                }
            }

            SaveService.Save<Comment, Comment>(entity.Comments, saves);

            extension.ExtendSaveRelations(entity, saves);
        }

        public void UpdateRelations(Premium entity, Premium existing, ISavesCollector saves)
        {
            var populated = (entity as ICloneable<Policy>).GetPopulated();
            if(populated[0])
            {
                if (entity.Comments != null)
                {
                    foreach (var field in entity.Comments)
                    {
                        field.PremiumId = entity.PremiumId;
                    }
                }

                SaveService.Update<Comment, Comment>(entity.Comments, existing.Comments, saves);
            }

            extension.ExtendSaveRelations(entity, saves);
        }

        private void DeleteRelations(Premium entity, ISavesCollector saves)
        {
            SaveService.Delete<Comment, Comment>(entity.Comments, saves);
        }

        private void SetMtoFields(Premium entity)
        {
        }

        public bool EntityChanged(Premium entity, Premium existing)
        {
            return extension.ExtendEntityChanged(entity, existing)
                || entity.PremiumType != existing.PremiumType
                || entity.AssignmentId != existing.AssignmentId
                || entity.Amount != existing.Amount
                || entity.Created != existing.Created
                || entity.Updated != existing.Updated;
        }

        public void Insert(IStormContext context, IList<Premium> entities)
        {
            for (int index = 0; index < entities.Count; index++)
            {
                PersistenceEvents.BeforeInsert(entities[index]);
            }

        }
    }
}
