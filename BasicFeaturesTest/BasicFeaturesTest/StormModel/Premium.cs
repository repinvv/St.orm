//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace StormTestProject.StormModel
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using St.Orm;
    using St.Orm.Interfaces;

    public partial class Premium : IEquatable<Premium>, ICloneable<Premium>, IHaveId, IDbEntity
    {
        public int PremiumId { get;set; }

        public int PremiumType { get;set; }

        public int AssignmentId { get;set; }

        public decimal Amount { get;set; }

        public DateTime Created { get;set; }

        public DateTime Updated { get;set; }

        #region Navigation properties
        public virtual IList<Comment> Comments
        {
            #region implementation
            get
            {
                if(populated[0] || loadService == null)
                {
                    return field0;
                }

                Func<IQueryable<Comment>> query = () =>
                {
                    return loadService.Context.Set<Comment>()
                        .Join(sourceQuery, x => x.PremiumId, x => x.PremiumId, (x, y) => x);
                };
                var items = loadService.GetList<Comment, Comment, int?>(0, query, x => x.PremiumId, PremiumId);
                if (clonedFrom == null)
                {
                    field0 = items;
                }
                else
                {
                    clonedFrom.Comments = items;
                    field0 = new List<Comment>(items.Count);
                    var repo = loadService.Context.GetDalRepository<Comment, Comment>();
                    foreach(var item in items)
                    {
                        field0.Add(repo.Clone(item));
                    }
                }

                populated[0] = true;
                return field0;
            }
            set
            {
                field0 = value;
                populated[0] = true;
            }
            #endregion
        }

        #endregion

        #region Private fields
        private readonly bool[] populated;
        private readonly ILoadService loadService;
        IQueryable<Premium> sourceQuery;
        private readonly Premium clonedFrom;
        private IList<Comment> field0;
        #endregion

        #region Constructors
        public Premium(Premium clonedFrom, IQueryable<Premium> sourceQuery, ILoadService loadService)
        {
            this.clonedFrom = clonedFrom;
            this.loadService = loadService;
            this.sourceQuery = sourceQuery;
            populated = new bool[1];
        }

        public Premium(IQueryable<Premium> sourceQuery, ILoadService loadService)
        {
            this.loadService = loadService;
            this.sourceQuery = sourceQuery;
            populated = new bool[1];
        }

        public Premium()
        {
            field0 = new List<Comment>();
            populated = new bool[]{true};
        }
        #endregion

        #region ICloneable implementation
        Premium ICloneable<Premium>.Clone()
        {
            return new Premium(this, sourceQuery, loadService)
            {
                PremiumId = PremiumId,
                PremiumType = PremiumType,
                AssignmentId = AssignmentId,
                Amount = Amount,
                Created = Created,
                Updated = Updated,
            };
        }

        Premium ICloneable<Premium>.ClonedFrom()
        {
            return clonedFrom;
        }

        bool[] ICloneable<Premium>.GetPopulated()
        {
            return populated;
        }
        #endregion

        #region Equality members
        public override bool Equals(object obj)
        {
            return Equals(obj as Premium);
        }

        public bool Equals(Premium other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            return PremiumId == other.PremiumId;
        }

        public override int GetHashCode()
        {
            unchecked
            {
                return PremiumId.GetHashCode();
            }
        }

        public static bool operator ==(Premium left, Premium right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Premium left, Premium right)
        {
            return !Equals(left, right);
        }
        #endregion
    }
}
