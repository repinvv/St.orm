//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace StormTestProject.StormModel
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using St.Orm;
    using St.Orm.Interfaces;

    public partial class Covered : IEquatable<Covered>, ICloneable<Covered>, IHaveId, IDbEntity
    {
        public int CoveredId { get;set; }

        public int CoveredType { get;set; }

        public int AssignmentId { get;set; }

        public int Headcount { get;set; }

        public DateTime Created { get;set; }

        public DateTime Updated { get;set; }

        #region Navigation properties
        #endregion

        #region Private fields
        private readonly ILoadService loadService;
        IQueryable<Covered> sourceQuery;
        private readonly Covered clonedFrom;
        #endregion

        #region Constructors
        public Covered(Covered clonedFrom, IQueryable<Covered> sourceQuery, ILoadService loadService)
        {
            this.clonedFrom = clonedFrom;
            this.loadService = loadService;
            this.sourceQuery = sourceQuery;
        }

        public Covered(IQueryable<Covered> sourceQuery, ILoadService loadService)
        {
            this.loadService = loadService;
            this.sourceQuery = sourceQuery;
        }

        public Covered()
        {
        }
        #endregion

        #region ICloneable implementation
        Covered ICloneable<Covered>.Clone()
        {
            return new Covered(this, sourceQuery, loadService)
            {
                CoveredId = CoveredId,
                CoveredType = CoveredType,
                AssignmentId = AssignmentId,
                Headcount = Headcount,
                Created = Created,
                Updated = Updated,
            };
        }

        Covered ICloneable<Covered>.ClonedFrom()
        {
            return clonedFrom;
        }

        bool[] ICloneable<Covered>.GetPopulated()
        {
            return null;
        }
        #endregion

        #region Equality members
        public override bool Equals(object obj)
        {
            return Equals(obj as Covered);
        }

        public bool Equals(Covered other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            return CoveredId == other.CoveredId;
        }

        public override int GetHashCode()
        {
            unchecked
            {
                return CoveredId.GetHashCode();
            }
        }

        public static bool operator ==(Covered left, Covered right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Covered left, Covered right)
        {
            return !Equals(left, right);
        }
        #endregion
    }
}
