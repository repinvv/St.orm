//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace StormGenerator.Generation.Generators.MsSqlCiServices
{
    using StormGenerator.Settings;
    using GenericCi;
    using System;
    using System.Text;
    using System.Linq;

    [System.CodeDom.Compiler.GeneratedCode("SharpRazor", "1.0.0.0")]
    internal class CiHelper : FileGenerator
    {
        #region constructor
        GenOptions options;

        public CiHelper(GenOptions options)
        {
            this.options = options;
        }
        #endregion

        public override string FileName => "CiHelper";

        public override string Execute()
        {
            WriteLiteral("namespace ");
            Write(options.OutputNamespace);
            WriteLiteral(Environment.NewLine);
            WriteLiteral("{");
            WriteLiteral(Environment.NewLine);
            WriteLiteral("    using System.Data.SqlClient;");
            WriteLiteral(Environment.NewLine);
            WriteLiteral("	using System.Collections.Generic;");
            WriteLiteral(Environment.NewLine);
            WriteLiteral("    using System;");
            WriteLiteral(Environment.NewLine);
            WriteLiteral("    using System.Data;");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(Environment.NewLine);
            WriteLiteral("    ");
            Write(options.Visibility);
            WriteLiteral(" static class CiHelper");
            WriteLiteral(Environment.NewLine);
            WriteLiteral("    {");
            WriteLiteral(Environment.NewLine);
            WriteLiteral("        const SqlBulkCopyOptions BulkOptions =");
            WriteLiteral(Environment.NewLine);
            WriteLiteral("            SqlBulkCopyOptions.FireTriggers");
            WriteLiteral(Environment.NewLine);
            WriteLiteral("            | SqlBulkCopyOptions.CheckConstraints");
            WriteLiteral(Environment.NewLine);
            WriteLiteral("            | SqlBulkCopyOptions.KeepNulls");
            WriteLiteral(Environment.NewLine);
            WriteLiteral("            | SqlBulkCopyOptions.KeepIdentity;");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(Environment.NewLine);
            Write(new CombineHashcodes().Execute());
            WriteLiteral(Environment.NewLine);
            Write(new ReadBytes().Execute());
            WriteLiteral(Environment.NewLine);
            WriteLiteral("        public static List<T> ExecuteSelect<T>(string query, ");
            WriteLiteral(Environment.NewLine);
            WriteLiteral("                                        SqlParameter[] parms, ");
            WriteLiteral(Environment.NewLine);
            WriteLiteral("                                        Func<SqlDataReader, List<T>> func, ");
            WriteLiteral(Environment.NewLine);
            WriteLiteral("                                        SqlConnection conn, ");
            WriteLiteral(Environment.NewLine);
            WriteLiteral("                                        SqlTransaction trans)");
            WriteLiteral(Environment.NewLine);
            WriteLiteral("        {");
            WriteLiteral(Environment.NewLine);
            WriteLiteral("            using (var command = new SqlCommand(query, conn))");
            WriteLiteral(Environment.NewLine);
            WriteLiteral("            {");
            WriteLiteral(Environment.NewLine);
            WriteLiteral("                command.Transaction = trans;");
            WriteLiteral(Environment.NewLine);
            WriteLiteral("                command.Parameters.AddRange(parms);");
            WriteLiteral(Environment.NewLine);
            WriteLiteral("                using (var reader = command.ExecuteReader(CommandBehavior.SequentialAccess))");
            WriteLiteral(Environment.NewLine);
            WriteLiteral("                {");
            WriteLiteral(Environment.NewLine);
            WriteLiteral("                    return func(reader);");
            WriteLiteral(Environment.NewLine);
            WriteLiteral("                }");
            WriteLiteral(Environment.NewLine);
            WriteLiteral("            }");
            WriteLiteral(Environment.NewLine);
            WriteLiteral("        }");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(Environment.NewLine);
            WriteLiteral("        public static void ExecuteNonQuery(string query,");
            WriteLiteral(Environment.NewLine);
            WriteLiteral("            SqlParameter[] parms,");
            WriteLiteral(Environment.NewLine);
            WriteLiteral("            SqlConnection conn,");
            WriteLiteral(Environment.NewLine);
            WriteLiteral("            SqlTransaction trans)");
            WriteLiteral(Environment.NewLine);
            WriteLiteral("        {");
            WriteLiteral(Environment.NewLine);
            WriteLiteral("            using (var command = new SqlCommand(query, conn))");
            WriteLiteral(Environment.NewLine);
            WriteLiteral("            {");
            WriteLiteral(Environment.NewLine);
            WriteLiteral("                command.Transaction = trans;");
            WriteLiteral(Environment.NewLine);
            WriteLiteral("                command.Parameters.AddRange(parms);");
            WriteLiteral(Environment.NewLine);
            WriteLiteral("                command.ExecuteNonQuery();");
            WriteLiteral(Environment.NewLine);
            WriteLiteral("            }");
            WriteLiteral(Environment.NewLine);
            WriteLiteral("        }");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(Environment.NewLine);
            WriteLiteral("        public static void BulkInsert(IDataReader reader, string table, SqlConnection conn, SqlTransaction trans)");
            WriteLiteral(Environment.NewLine);
            WriteLiteral("        {");
            WriteLiteral(Environment.NewLine);
            WriteLiteral("            using (var bulk = new SqlBulkCopy(conn, BulkOptions, trans))");
            WriteLiteral(Environment.NewLine);
            WriteLiteral("            {");
            WriteLiteral(Environment.NewLine);
            WriteLiteral("                bulk.DestinationTableName = table;");
            WriteLiteral(Environment.NewLine);
            WriteLiteral("                bulk.WriteToServer(reader);");
            WriteLiteral(Environment.NewLine);
            WriteLiteral("            }");
            WriteLiteral(Environment.NewLine);
            WriteLiteral("        }");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(Environment.NewLine);
            WriteLiteral("        public static void DropTable(string table, SqlConnection conn, SqlTransaction trans)");
            WriteLiteral(Environment.NewLine);
            WriteLiteral("        {");
            WriteLiteral(Environment.NewLine);
            WriteLiteral("            var sql = \"DROP TABLE \" + table;");
            WriteLiteral(Environment.NewLine);
            WriteLiteral("            ExecuteNonQuery(sql, new SqlParameter[0],  conn, trans);");
            WriteLiteral(Environment.NewLine);
            WriteLiteral("        }");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(Environment.NewLine);
            WriteLiteral("        public static string CreateTempTableName()");
            WriteLiteral(Environment.NewLine);
            WriteLiteral("        {");
            WriteLiteral(Environment.NewLine);
            WriteLiteral("            return \"#a\" + Guid.NewGuid().ToString(\"N\");");
            WriteLiteral(Environment.NewLine);
            WriteLiteral("        }");
            WriteLiteral(Environment.NewLine);
            WriteLiteral("    }");
            WriteLiteral(Environment.NewLine);
            WriteLiteral("}");
            WriteLiteral(Environment.NewLine);

            return ToString();
        }
    }
}
