@visibility internal
@inherits NsFileGenerator(GenOptions options)
@using StormGenerator.Settings StormGenerator.Models GeneratorHelpers CiServiceMethods CiServiceMethods.Insert
@constructor(EntityModel entityModel)
@member{public override string FileName => entityModel.Model.Name + "CIService";}

@{var model = entityModel.Model;}
    using System;
    using System.Data;
    using System.Data.SqlClient;
	using System.Collections.Generic;
	using System.Linq;
	using System.Text;
@if(model.NamespaceSuffix != null){
    using @model.NamespaceSuffix;
}

    @options.Visibility class @(model.Name)CiService : ICiService<@model.Name>
    {
@[ReadEntities(model)]

        public List<@model.Name> Get(string query, 
            SqlParameter[] parms, 
            SqlConnection conn, 
            SqlTransaction trans)
        {
            using (new ConnectionHandler(conn))
            {
                return CiHelper.ExecuteSelect(query, parms, ReadEntities, conn, trans);
            }
        }

@if(!model.KeyFields.Any()){
@[GetByPrimaryKeyException(model)]
} else {
  @if(model.KeyFields.Count == 1){
@[GetBySinglePrimaryKey(model)]
  } else {
@[KeyDataReader(model)]

@[GetByMultiPrimaryKey(model)]
  }
}

@if(model.KeyFields.Count != 1 
    || (model.KeyFields[0].Column.Sequence == null && !model.KeyFields[0].Column.IsIdentity)){
@[RegularInsert(model, options)]
} else {
  @if(model.KeyFields[0].Column.IsIdentity){
@[IdentityInsert(model, options)]
  }
  @if(model.KeyFields[0].Column.Sequence != null){
@[SequenceInsert(model, options)]
  }
}
    }
