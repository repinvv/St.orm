@visibility internal
@inherits FileGenerator
@using StormGenerator.Settings
@constructor(GenOptions options)
@member{public override string FileName => "BaseDataReader";}

namespace @options.OutputNamespace
{
    using System;
    using System.Data;

    @options.Visibility abstract class BaseDataReader : IDataReader
    {
        private readonly int count;
        protected int current = -1;
        private bool disposed;
        
        protected BaseDataReader(int count)
        {
            this.count = count;
        }

        public abstract object GetValue(int i);
        public abstract int FieldCount { get; }
        public bool Read() { return ++current < count; }

        #region methods unused for bulk insert
        public void Dispose() { disposed = true; }
        public string GetName(int i) { return null; }
        public string GetDataTypeName(int i) { return null; }
        public Type GetFieldType(int i) { return null; }
        public int GetValues(object[] values) { return 0; }
        public int GetOrdinal(string name) { return 0; }
        public bool GetBoolean(int i) { return false; }
        public byte GetByte(int i) { return 0; }
        public long GetBytes(int i, long fieldOffset, byte[] buffer, int bufferoffset, int length) { return 0; }
        public char GetChar(int i) { return '\0'; }
        public long GetChars(int i, long fieldoffset, char[] buffer, int bufferoffset, int length) { return 0;}
        public Guid GetGuid(int i) { return new Guid(); }
        public short GetInt16(int i) { return 0; }
        public int GetInt32(int i) { return 0; }
        public long GetInt64(int i) { return 0; }
        public float GetFloat(int i) { return 0; }
        public double GetDouble(int i) { return 0; }
        public string GetString(int i) { return null; }
        public decimal GetDecimal(int i) { return 0; }
        public DateTime GetDateTime(int i) { return new DateTime(); }
        public IDataReader GetData(int i) { return null; }
        public bool IsDBNull(int i) { return false; }
        public object this[int i] { get { return null; } }
        public object this[string name] { get { return null; } }
        public void Close() { disposed = true; }
        public DataTable GetSchemaTable() { return null; }
        public bool NextResult() { return false; }
        public int Depth { get; private set; }
        public bool IsClosed { get { return disposed; } }
        public int RecordsAffected { get; private set; }
        #endregion
    }
}
