@visibility internal
@inherits NsFileGenerator(GenOptions options)
@using StormGenerator.Settings Storm.Interfaces StormGenerator.Models System.Collections.Generic
@constructor(List<EntityModel> models)
@member{public override string FileName => "MsSqlCi";}

    using System;
    using System.Data.SqlClient;
	using System.Data.Common;
	using System.Collections.Generic;

@foreach(var nspace in models.Select(x => x.Model.NamespaceSuffix).Where(x => x != null).Distinct()){
    using @nspace;
}
    @options.Visibility static class MsSqlCi
    {
        public static List<T> Get<T>(string query, 
            SqlParameter[] parms, 
            DbConnection conn, 
            DbTransaction trans = null)
        {
		    using (new ConnectionHandler(conn))
            {
                return GetService<T>().Get(query, parms, (SqlConnection)conn, trans as SqlTransaction);
            }
        }

        public static List<T> GetByPrimaryKey<T>(object ids, DbConnection conn, DbTransaction trans = null)
        {
		    using (new ConnectionHandler(conn))
            {
                return GetService<T>().GetByPrimaryKey(ids, (SqlConnection)conn, trans as SqlTransaction);
            }
        }

        public static void Insert<T>(List<T> entities, DbConnection conn, DbTransaction trans = null)
        {
		    using (new ConnectionHandler(conn))
            {
                GetService<T>().Insert(entities, (SqlConnection)conn, trans as SqlTransaction);
            }
        }

        public static void Insert<T>(T entity, DbConnection conn, DbTransaction trans = null)
        {
		    using (new ConnectionHandler(conn))
            {
                GetService<T>().Insert(entity, (SqlConnection)conn, trans as SqlTransaction);
            }
        }

		public static void Update<T>(List<T> entities, DbConnection conn, DbTransaction trans = null)
        {
		    using (new ConnectionHandler(conn))
            {
                GetService<T>().Update(entities, (SqlConnection)conn, trans as SqlTransaction);
            }
        }

        public static void Update<T>(T entity, DbConnection conn, DbTransaction trans = null)
        {
		    using (new ConnectionHandler(conn))
            {
                GetService<T>().Update(entity, (SqlConnection)conn, trans as SqlTransaction);
            }
        }

        private static Dictionary<Type, object> services =
            new Dictionary<Type, object>
            {
@foreach(var model in models){
                { typeof(@model.Model.Name), new @(model.Model.Name)CiService() },
}
           };

        private static ICiService<T> GetService<T>()
        {
            return services[typeof(T)] as ICiService<T>;
        }
    }
