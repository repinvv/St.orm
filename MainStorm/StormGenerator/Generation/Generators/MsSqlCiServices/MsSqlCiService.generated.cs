//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace StormGenerator.Generation.Generators.MsSqlCiServices
{
    using StormGenerator.Settings;
    using StormGenerator.Models;
    using GeneratorHelpers;
    using CiServiceMethods;
    using CiServiceMethods.Inserts;
    using CiServiceMethods.Updates;
    using CiServiceMethods.Deletes;
    using System;
    using System.Text;
    using System.Linq;

    [System.CodeDom.Compiler.GeneratedCode("SharpRazor", "1.0.0.0")]
    internal class MsSqlCiService : NsFileGenerator
    {
        #region constructor
        EntityModel entityModel;
        GenOptions options;

        public MsSqlCiService(EntityModel entityModel, GenOptions options)
            : base(options)
        {
            this.entityModel = entityModel;
            this.options = options;
        }
        #endregion

        public override string FileName => entityModel.Model.Name + "CIService";

        public override string Execute()
        {
            var model = entityModel.Model;
            WriteLiteral(@"    using System;");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"    using System.Data;");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"    using System.Data.SqlClient;");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"    using System.Collections.Generic;");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"    using System.Linq;");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"    using System.Text;");
            WriteLiteral(Environment.NewLine);
            if (model.NamespaceSuffix != null)
            {
                WriteLiteral(@"    using ");
                Write(model.NamespaceSuffix);
                WriteLiteral(@";");
                WriteLiteral(Environment.NewLine);
            }
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"    ");
            Write(options.Visibility);
            WriteLiteral(@" class ");
            Write(model.Name);
            WriteLiteral(@"CiService : ICiService<");
            Write(model.Name);
            WriteLiteral(@">");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"    {");
            WriteLiteral(Environment.NewLine);
            Write(new ReadEntities(model).Execute());
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"        public List<");
            Write(model.Name);
            WriteLiteral(@"> Get(string query, ");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"            SqlParameter[] parms, ");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"            SqlConnection conn, ");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"            SqlTransaction trans)");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"        {");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"            return CiHelper.ExecuteSelect(query, parms, ReadEntities, conn, trans);");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"        }");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"        #region EntityDataReader");
            WriteLiteral(Environment.NewLine);
            Write(new EntityReader(model, model.Fields, "EntityDataReader").Execute());
            WriteLiteral(@"        #endregion");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(Environment.NewLine);
            if (!model.KeyFields.Any())
            {
                Write(new GetByPrimaryKeyException(model).Execute());
            }
            else
            {
                if (model.KeyFields.Count == 1)
                {
                    Write(new GetBySinglePrimaryKey(model).Execute());
                }
                else
                {
                    Write(new KeyDataReader(model).Execute());
                    WriteLiteral(Environment.NewLine);
                    Write(new GetByMultiPrimaryKey(model).Execute());
                }
            }
            WriteLiteral(Environment.NewLine);
            if (model.KeyFields.Count != 1 
    || model.IsStruct
    || (model.KeyFields[0].Column.Sequence == null && !model.KeyFields[0].Column.IsIdentity))
            {
                Write(new RegularInsert(model, options).Execute());
            }
            else
            {
                if (model.KeyFields[0].Column.IsIdentity)
                {
                    Write(new IdentityInsert(model, options).Execute());
                }
                else
                {
                    if (model.KeyFields[0].Column.Sequence != null)
                    {
                        Write(new SequenceInsert(model, options).Execute());
                    }
                }
            }
            WriteLiteral(Environment.NewLine);
            if (model.KeyFields.Any() && model.Fields.Count > model.KeyFields.Count)
            {
                Write(new Update(model, options).Execute());
            }
            else
            {
                Write(new UpdateException(model).Execute());
            }
            WriteLiteral(Environment.NewLine);
            if (model.KeyFields.Count == 0)
            {
                Write(new DeleteNoKey(model, options).Execute());
            }
            if (model.KeyFields.Count > 1)
            {
                Write(new DeleteMultiKey(model, options).Execute());
            }
            if (model.KeyFields.Count == 1)
            {
                Write(new DeleteSingleKey(model, options).Execute());
            }
            WriteLiteral(@"    }");
            WriteLiteral(Environment.NewLine);

            return ToString();
        }
    }
}
