//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace StormGenerator.Generation.Generators.MsSqlCiServices
{
    using StormGenerator.Settings;
    using StormGenerator.Models;
    using GeneratorHelpers;
    using CiServiceMethods;
    using System;
    using System.Text;
    using System.Linq;

    [System.CodeDom.Compiler.GeneratedCode("SharpRazor", "1.0.0.0")]
    internal class MsSqlCiService : FileGenerator
    {
        #region constructor
        GenOptions options;
        EntityModel entityModel;

        public MsSqlCiService(GenOptions options, EntityModel entityModel)
        {
            this.options = options;
            this.entityModel = entityModel;
        }
        #endregion

        public override string FileName => entityModel.Model.Name + "CIService";

        public override string Execute()
        {
            var model = entityModel.Model;
            WriteLiteral(@"namespace ");
            Write(options.OutputNamespace);
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"{");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"    using System;");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"    using System.Data;");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"    using System.Data.SqlClient;");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"	using System.Collections.Generic;");
            WriteLiteral(Environment.NewLine);
            if (model.NamespaceSuffix != null)
            {
                WriteLiteral(@"    using ");
                Write(model.NamespaceSuffix);
                WriteLiteral(@";");
                WriteLiteral(Environment.NewLine);
            }
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"    ");
            Write(options.Visibility);
            WriteLiteral(@" class ");
            Write(model.Name);
            WriteLiteral(@"CiService : ICiService<");
            Write(model.Name);
            WriteLiteral(@">");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"    {");
            WriteLiteral(Environment.NewLine);
            Write(new ReadEntities(model).Execute());
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"        public List<");
            Write(model.Name);
            WriteLiteral(@"> Get(string query, ");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"            SqlParameter[] parms, ");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"            SqlConnection conn, ");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"            SqlTransaction trans)");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"        {");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"            using (new ConnectionHandler(conn))");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"            {");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"                return CiHelper.ExecuteSelect(query, parms, ReadEntities, conn, trans);");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"            }");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"        }");
            WriteLiteral(Environment.NewLine);
            if (model.KeyFields.Count > 1)
            {
                WriteLiteral(Environment.NewLine);
                Write(new KeyDataReader(model).Execute());
            }
            WriteLiteral(Environment.NewLine);
            if (!model.KeyFields.Any())
            {
                Write(new GetByPrimaryKeyException(model).Execute());
            }
            else
            {
                if (model.KeyFields.Count == 1)
                {
                    Write(new GetBySinglePrimaryKey(model).Execute());
                }
                else
                {
                    Write(new GetByMultiPrimaryKey(model).Execute());
                }
            }
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"		private void CreateIdTempTable(string table, SqlConnection conn, SqlTransaction trans)");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"        {");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"            var sql = ""CREATE TABLE "" + table + ");
            WriteLiteral(@"@");
            WriteLiteral(@"""(");
            WriteLiteral(Environment.NewLine);
            foreach (var field in model.KeyFields)
            {
                WriteLiteral(@"                ");
                Write(field.Column.Definition);
                if (field != model.KeyFields.Last())
                {
                    WriteLiteral(@",");
                }
                WriteLiteral(Environment.NewLine);
            }
            WriteLiteral(@"                )"";");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"            CiHelper.ExecuteNonQuery(sql, new SqlParameter[0], conn, trans);");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"        }");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"		public void Insert(List<");
            Write(model.Name);
            WriteLiteral(@"> entities, SqlConnection conn, SqlTransaction trans)");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"        {");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"		}");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"    }");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"}");
            WriteLiteral(Environment.NewLine);

            return ToString();
        }
    }
}
