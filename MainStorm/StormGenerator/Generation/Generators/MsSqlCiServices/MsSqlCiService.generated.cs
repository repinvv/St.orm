//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace StormGenerator.Generation.Generators.MsSqlCiServices
{
    using StormGenerator.Settings;
    using StormGenerator.Models;
    using Storm.Interfaces;
    using GeneratorHelpers;
    using System;
    using System.Text;
    using System.Linq;

    [System.CodeDom.Compiler.GeneratedCode("SharpRazor", "1.0.0.0")]
    internal class MsSqlCiService : FileGenerator
    {
        #region constructor
        GenOptions options;
        EntityModel entityModel;

        public MsSqlCiService(GenOptions options, EntityModel entityModel)
        {
            this.options = options;
            this.entityModel = entityModel;
        }
        #endregion

        public override string FileName => entityModel.Model.Name + "CIService";

        public override string Execute()
        {
            var model = entityModel.Model;
            WriteLiteral("namespace ");
            Write(options.OutputNamespace);
            WriteLiteral(Environment.NewLine);
            WriteLiteral("{");
            WriteLiteral(Environment.NewLine);
            WriteLiteral("    using System;");
            WriteLiteral(Environment.NewLine);
            WriteLiteral("    using System.Data;");
            WriteLiteral(Environment.NewLine);
            WriteLiteral("    using System.Data.SqlClient;");
            WriteLiteral(Environment.NewLine);
            WriteLiteral("	using System.Collections.Generic;");
            WriteLiteral(Environment.NewLine);
            if (model.NamespaceSuffix != null)
            {
                WriteLiteral("    using ");
                Write(model.NamespaceSuffix);
                WriteLiteral(";");
                WriteLiteral(Environment.NewLine);
            }
            if (!options.CiOnly)
            {
                WriteLiteral("    using ");
                Write(typeof(ILoadService<>).Namespace);
                WriteLiteral(";");
                WriteLiteral(Environment.NewLine);
            }
            WriteLiteral(Environment.NewLine);
            WriteLiteral("    ");
            Write(options.Visibility);
            WriteLiteral(" class ");
            Write(model.Name);
            WriteLiteral("CiService : ICiService<");
            Write(model.Name);
            WriteLiteral(">");
            WriteLiteral(Environment.NewLine);
            WriteLiteral("    {");
            WriteLiteral(Environment.NewLine);
            WriteLiteral("        public List<");
            Write(model.Name);
            WriteLiteral("> Materialize(string query, ");
            WriteLiteral(Environment.NewLine);
            WriteLiteral("                            SqlParameter[] parms, ");
            WriteLiteral(Environment.NewLine);
            WriteLiteral("                            SqlConnection conn, ");
            WriteLiteral(Environment.NewLine);
            WriteLiteral("                            SqlTransaction trans)");
            WriteLiteral(Environment.NewLine);
            WriteLiteral("        {");
            WriteLiteral(Environment.NewLine);
            WriteLiteral("            Func<SqlDataReader, List<");
            Write(model.Name);
            WriteLiteral(">> func = reader =>");
            WriteLiteral(Environment.NewLine);
            WriteLiteral("            {");
            WriteLiteral(Environment.NewLine);
            WriteLiteral("                var list = new List<");
            Write(model.Name);
            WriteLiteral(">();");
            WriteLiteral(Environment.NewLine);
            WriteLiteral("                while (reader.Read())");
            WriteLiteral(Environment.NewLine);
            WriteLiteral("                {");
            WriteLiteral(Environment.NewLine);
            WriteLiteral("                    var entity = new ");
            Write(model.Name);
            WriteLiteral("();");
            WriteLiteral(Environment.NewLine);
            WriteLiteral("                    PopulateFields(entity, reader);");
            WriteLiteral(Environment.NewLine);
            WriteLiteral("                    list.Add(entity);");
            WriteLiteral(Environment.NewLine);
            WriteLiteral("                }");
            WriteLiteral(Environment.NewLine);
            WriteLiteral("                return list;");
            WriteLiteral(Environment.NewLine);
            WriteLiteral("            };");
            WriteLiteral(Environment.NewLine);
            WriteLiteral("            return CiHelper.ExecuteSelect(query, parms, func, conn, trans);");
            WriteLiteral(Environment.NewLine);
            WriteLiteral("        }");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(Environment.NewLine);
            if (!options.CiOnly)
            {
                WriteLiteral("        public List<");
                Write(model.Name);
                WriteLiteral("> Materialize(ILoadService<");
                Write(model.Name);
                WriteLiteral("> loadService,");
                WriteLiteral(Environment.NewLine);
                WriteLiteral("                            string query, ");
                WriteLiteral(Environment.NewLine);
                WriteLiteral("                            SqlParameter[] parms, ");
                WriteLiteral(Environment.NewLine);
                WriteLiteral("                            SqlConnection conn, ");
                WriteLiteral(Environment.NewLine);
                WriteLiteral("                            SqlTransaction trans)");
                WriteLiteral(Environment.NewLine);
                WriteLiteral("        {");
                WriteLiteral(Environment.NewLine);
                WriteLiteral("            Func<SqlDataReader, List<");
                Write(model.Name);
                WriteLiteral(">> func = reader =>");
                WriteLiteral(Environment.NewLine);
                WriteLiteral("            {");
                WriteLiteral(Environment.NewLine);
                WriteLiteral("                var list = new List<");
                Write(model.Name);
                WriteLiteral(">();");
                WriteLiteral(Environment.NewLine);
                WriteLiteral("                while (reader.Read())");
                WriteLiteral(Environment.NewLine);
                WriteLiteral("                {");
                WriteLiteral(Environment.NewLine);
                WriteLiteral("                    var entity = new ");
                Write(model.Name);
                WriteLiteral("(loadService);");
                WriteLiteral(Environment.NewLine);
                WriteLiteral("                    PopulateFields(entity, reader);");
                WriteLiteral(Environment.NewLine);
                WriteLiteral("                    list.Add(entity);");
                WriteLiteral(Environment.NewLine);
                WriteLiteral("                ");
                WriteLiteral("}");
                WriteLiteral(Environment.NewLine);
                WriteLiteral("                return list;");
                WriteLiteral(Environment.NewLine);
                WriteLiteral("            ");
                WriteLiteral("};");
                WriteLiteral(Environment.NewLine);
                WriteLiteral("            return CiHelper.ExecuteSelect(query, parms, func, conn, trans);");
                WriteLiteral(Environment.NewLine);
                WriteLiteral("        ");
                WriteLiteral("}");
                WriteLiteral(Environment.NewLine);
                WriteLiteral(Environment.NewLine);
            }
            WriteLiteral("        private void PopulateFields(");
            Write(model.Name);
            WriteLiteral(" entity, SqlDataReader reader)");
            WriteLiteral(Environment.NewLine);
            WriteLiteral("        {");
            WriteLiteral(Environment.NewLine);
            int i = 0;
            foreach (var field in model.Fields.Where(x=>x.IsEnabled))
            {
                WriteLiteral("            entity.");
                Write(field.Name);
                WriteLiteral(" = ");
                Write(field.GetReaderMethod(i++));
                WriteLiteral(";");
                WriteLiteral(Environment.NewLine);
            }
            WriteLiteral("        }");
            WriteLiteral(Environment.NewLine);
            WriteLiteral("    }");
            WriteLiteral(Environment.NewLine);
            WriteLiteral("}");
            WriteLiteral(Environment.NewLine);

            return ToString();
        }
    }
}
