@visibility internal
@inherits FileGenerator
@using StormGenerator.Settings GenericCi
@constructor(GenOptions options)
@member{public override string FileName => "CiHelper";}

namespace @options.OutputNamespace
{
    using System.Data.SqlClient;
	using System.Collections.Generic;
    using System;
    using System.Data;

    @options.Visibility static class CiHelper
    {
        const SqlBulkCopyOptions BulkOptions =
            SqlBulkCopyOptions.FireTriggers
            | SqlBulkCopyOptions.CheckConstraints
            | SqlBulkCopyOptions.KeepNulls
            | SqlBulkCopyOptions.KeepIdentity;

@[CombineHashcodes()]

@[ReadBytes()]

        public static List<T> ExecuteSelect<T>(string query, 
                                        SqlParameter[] parms, 
                                        Func<SqlDataReader, List<T>> func, 
                                        SqlConnection conn, 
                                        SqlTransaction trans)
        {
            using (var command = new SqlCommand(query, conn))
            {
                command.Transaction = trans;
                command.Parameters.AddRange(parms);
                using (var reader = command.ExecuteReader(CommandBehavior.SequentialAccess))
                {
                    return func(reader);
                }
            }
        }

        public static void ExecuteNonQuery(string query,
            SqlParameter[] parms,
            SqlConnection conn,
            SqlTransaction trans)
        {
            using (var command = new SqlCommand(query, conn))
            {
                command.Transaction = trans;
                command.Parameters.AddRange(parms);
                command.ExecuteNonQuery();
            }
        }

        public static void BulkInsert(IDataReader reader, string table, SqlConnection conn, SqlTransaction trans)
        {
            using (var bulk = new SqlBulkCopy(conn, BulkOptions, trans))
            {
                bulk.DestinationTableName = table;
                bulk.WriteToServer(reader);
            }
        }

        public static void DropTable(string table, SqlConnection conn, SqlTransaction trans)
        {
            var sql = "DROP TABLE " + table;
            ExecuteNonQuery(sql, new SqlParameter[0],  conn, trans);
        }

        public static string CreateTempTableName()
        {
            return "#a" + Guid.NewGuid().ToString("N");
        }
    }
}
