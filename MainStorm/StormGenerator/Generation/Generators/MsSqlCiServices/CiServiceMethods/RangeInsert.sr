@visibility internal
@using StormGenerator.Settings StormGenerator.Models.GenModels GeneratorHelpers
@constructor(Model model, GenOptions options)

@{ var parmCount = model.Fields.Count - 1;
   var maxItems = Math.Min(options.MaxInsertItems, options.MaxSqlParms / parmCount);
 }
        public void Insert(List<@model.Name> entities, SqlConnection conn, SqlTransaction trans)
        {		
		   using(new ConnectionHandler(conn))
		   {
		       foreach(var group in entities.SplitInGroupsBy(@maxItems))
		       {
		           RangeInsert(group, conn, trans);
		       }
           }
        }

		private string insertRequestCache;
		private int insertCacheLength;

		private void RangeInsert(List<@model.Name> entities, SqlConnection conn, SqlTransaction trans)
		{
		    if(insertCacheLength != entities.Count)
			{
			    insertRequestCache = ConstructInsertRequest(entities.Count);
				insertCacheLength = entities.Count;
			}

			int i = 0;
			var parms = entities.SelectMany(x => GetInsertParameters(x, i++)).ToArray();
	@if(model.IsStruct){
	        CiHelper.ExecuteNonQuery(insertRequestCache, parms, conn, trans);
    } else {
			CiHelper.ExecuteSelect(insertRequestCache, parms, reader => ReadIdentity(reader, entities), conn, trans);
    }
		}
    @if(!model.IsStruct){@newline
        private List<@model.Name> ReadIdentity(SqlDataReader reader, List<@model.Name> entities)
        {
            int i = 0;
            while (reader.Read())
            {
                entities[i++].@model.KeyFields[0].Name = @model.KeyFields[0].GetReaderMethod(0);
            @}

			return entities;
        @}
    }

		private string ConstructInsertRequest(int count)
		{
		    var sb = new StringBuilder();
            sb.AppendLine("INSERT INTO @model.Table.Id");
			sb.AppendLine("(");

@foreach(var line in model.ValueFields().GetSelectLines()){
            sb.AppendLine("@line");
}
			sb.AppendLine(") OUTPUT inserted.@model.KeyFields[0].Column.Name VALUES");
			AppendInsertKeys(sb, 0);
            for (int i = 1; i < count; i++)
            {
			    sb.AppendLine("), ");
				AppendInsertKeys(sb, i);
            }
			
			sb.AppendLine(")");
			return sb.ToString();
		}

	    private IEnumerable<SqlParameter> GetInsertParameters(@model.Name entity, int i)
		{
@{var i = 0; }
@foreach(var field in model.ValueFields()){
            yield return new SqlParameter("parm@(i++)i" + i, entity.@field.Name@if(field.Column.IsNullable){ ?? (object)DBNull.Value});
}
        }

		private void AppendInsertKeys(StringBuilder sb, int i)
		{
@{i = 0; }
@foreach(var field in model.ValueFields()){
                sb.Append("@if(field != model.ValueFields().First()){, }else{( }@@parm@(i++)i"); sb.Append(i);
}
        }
