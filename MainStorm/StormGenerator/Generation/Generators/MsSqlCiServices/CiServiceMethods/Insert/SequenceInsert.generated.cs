//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace StormGenerator.Generation.Generators.MsSqlCiServices.CiServiceMethods.Insert
{
    using StormGenerator.Settings;
    using StormGenerator.Models.GenModels;
    using GeneratorHelpers;
    using System;
    using System.Text;
    using System.Linq;

    [System.CodeDom.Compiler.GeneratedCode("SharpRazor", "1.0.0.0")]
    internal class SequenceInsert
    {
        #region constructor
        Model model;
        GenOptions options;

        public SequenceInsert(Model model, GenOptions options)
        {
            this.model = model;
            this.options = options;
        }
        #endregion

        #region basic members
        private readonly StringBuilder sb = new StringBuilder();
        private string executed;

        private void WriteLiteral(string text)
        {
            if (!string.IsNullOrEmpty(text))
            {
                sb.Append(text);
            }
        }

        private void Write(object value)
        {
            if (value != null)
            {
                sb.Append(value);
            }
        }

        public override string ToString()
        {
            return executed;
        }
        #endregion

        public string Execute()
        {
            WriteLiteral(@"        public static int MinAmountForBulk = 10;");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"        public void Insert(List<");
            Write(model.Name);
            WriteLiteral(@"> entities, SqlConnection conn, SqlTransaction trans)");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"        {");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"            using (new ConnectionHandler(conn))");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"            {");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"                if(entities.Count >= MinAmountForBulk)");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"                {");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"                   ");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"                }");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"                else");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"                {");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"                    RangeInsert(entities, conn, trans);");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"                }");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"            }");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"        }");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(Environment.NewLine);
            var fields = model.ValueFields();
            WriteLiteral(@"        #region range insert methods");
            WriteLiteral(Environment.NewLine);
            if (!model.IsStruct)
            {
                Write(new RangeInsertWithKey(model, options).Execute());
                WriteLiteral(Environment.NewLine);
                Write(new ConstructRequestWithOutput(model, fields).Execute());
                WriteLiteral(Environment.NewLine);
                Write(new SequenceInsertKeys(model).Execute());
            }
            else
            {
                Write(new RangeInsert(model, options).Execute());
                WriteLiteral(Environment.NewLine);
                Write(new ConstructRequest(model, fields).Execute());
                WriteLiteral(Environment.NewLine);
                Write(new SequenceInsertKeys(model).Execute());
            }
            WriteLiteral(Environment.NewLine);
            Write(new InsertParameters(model, fields).Execute());
            WriteLiteral(@"        #endregion");
            WriteLiteral(Environment.NewLine);

            return executed = sb.ToString();
        }
    }
}
