//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace StormGenerator.Generation.Generators.MsSqlCiServices.CiServiceMethods.Insert
{
    using StormGenerator.Settings;
    using StormGenerator.Models.GenModels;
    using GeneratorHelpers;
    using System;
    using System.Text;
    using System.Linq;

    [System.CodeDom.Compiler.GeneratedCode("SharpRazor", "1.0.0.0")]
    internal class SingleInsert
    {
        #region constructor
        Model model;

        public SingleInsert(Model model)
        {
            this.model = model;
        }
        #endregion

        #region basic members
        private readonly StringBuilder sb = new StringBuilder();
        private string executed;

        private void WriteLiteral(string text)
        {
            if (!string.IsNullOrEmpty(text))
            {
                sb.Append(text);
            }
        }

        private void Write(object value)
        {
            if (value != null)
            {
                sb.Append(value);
            }
        }

        public override string ToString()
        {
            return executed;
        }
        #endregion

        public string Execute()
        {
            WriteLiteral(@"        public void Insert(");
            Write(model.Name);
            WriteLiteral(@" entity, SqlConnection conn, SqlTransaction trans)");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"        {        ");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"            using(new ConnectionHandler(conn))");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"            {");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"                var sql = ConstructInsertRequest(1);    ");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"                var parms = GetInsertParameters(entity, 0).ToArray();");
            WriteLiteral(Environment.NewLine);
            if (model.IsStruct)
            {
                WriteLiteral(@"                CiHelper.ExecuteNonQuery(sql, parms, conn, trans);");
                WriteLiteral(Environment.NewLine);
            }
            else
            {
                WriteLiteral(@"                Func<IDataReader, List<");
                Write(model.Name);
                WriteLiteral(@">> readId = reader =>");
                WriteLiteral(Environment.NewLine);
                WriteLiteral(@"                    {");
                WriteLiteral(Environment.NewLine);
                WriteLiteral(@"                        if(reader.Read()) entity.");
                Write(model.KeyFields[0].Name);
                WriteLiteral(@" = ");
                Write(model.KeyFields[0].GetReaderMethod(0));
                WriteLiteral(@";");
                WriteLiteral(Environment.NewLine);
                WriteLiteral(@"                        return null;");
                WriteLiteral(Environment.NewLine);
                WriteLiteral(@"                    ");
                WriteLiteral(@"};");
                WriteLiteral(Environment.NewLine);
                WriteLiteral(@"                CiHelper.ExecuteSelect(sql, parms, readId, conn, trans);");
                WriteLiteral(Environment.NewLine);
            }
            WriteLiteral(@"            }");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"        }");
            WriteLiteral(Environment.NewLine);

            return executed = sb.ToString();
        }
    }
}
