@visibility internal
@using StormGenerator.Settings GeneratorHelpers StormGenerator.Models.GenModels
@constructor(Model model)

        public List<@model.Name> GetByPrimaryKey(object ids, SqlConnection conn, SqlTransaction trans)
        {
            var idsArray = (object[])ids;
	@{var i = 0;}
	@foreach(var key in model.KeyFields){
            var key@i = (@(key.Column.CsTypeName)[])idsArray[@(i++)];
    }
            using (new ConnectionHandler(conn))
            {
                var table = CiHelper.CreateTempTableName();
                CreateIdTempTable(table, conn, trans);
                var dataReader = new KeyDataReader(@model.JoinKeyNames());
                CiHelper.BulkInsert(dataReader, table, conn, trans);
                var sql = @"select 
  @foreach(var line in model.Fields.GetSelectLines("e.")){
                @line
  }
				from @model.Table.Id e
                inner join " + table + @" t on 
  @foreach(var line in model.GetKeyEqualityLines("e.", "t.", "\";")){
                @line
  }
                var result = CiHelper.ExecuteSelect(sql, new SqlParameter[0], ReadEntities, conn, trans);
                CiHelper.DropTable(table, conn, trans);
                return result;
            }
        }

		private void CreateIdTempTable(string table, SqlConnection conn, SqlTransaction trans)
        {
            var sql = "CREATE TABLE " + table + @"(
@foreach(var field in model.KeyFields){
                @field.Column.Definition@if(field != model.KeyFields.Last()){,}
}
                )";
            CiHelper.ExecuteNonQuery(sql, new SqlParameter[0], conn, trans);
        }
