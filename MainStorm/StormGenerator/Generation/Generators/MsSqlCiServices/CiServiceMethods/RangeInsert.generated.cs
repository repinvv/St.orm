//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace StormGenerator.Generation.Generators.MsSqlCiServices.CiServiceMethods
{
    using StormGenerator.Settings;
    using StormGenerator.Models.GenModels;
    using GeneratorHelpers;
    using System;
    using System.Text;
    using System.Linq;

    [System.CodeDom.Compiler.GeneratedCode("SharpRazor", "1.0.0.0")]
    internal class RangeInsert
    {
        #region constructor
        Model model;
        GenOptions options;

        public RangeInsert(Model model, GenOptions options)
        {
            this.model = model;
            this.options = options;
        }
        #endregion

        #region basic members
        private readonly StringBuilder sb = new StringBuilder();
        private string executed;

        private void WriteLiteral(string text)
        {
            if (!string.IsNullOrEmpty(text))
            {
                sb.Append(text);
            }
        }

        private void Write(object value)
        {
            if (value != null)
            {
                sb.Append(value);
            }
        }

        public override string ToString()
        {
            return executed;
        }
        #endregion

        public string Execute()
        {
             var parmCount = model.Fields.Count - 1;
   var maxItems = Math.Min(options.MaxInsertItems, options.MaxSqlParms / parmCount);
 
            WriteLiteral(@"        public void Insert(List<");
            Write(model.Name);
            WriteLiteral(@"> entities, SqlConnection conn, SqlTransaction trans)");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"        {        ");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"           using(new ConnectionHandler(conn))");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"           {");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"               foreach(var group in entities.SplitInGroupsBy(");
            Write(maxItems);
            WriteLiteral(@"))");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"               {");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"                   RangeInsert(group, conn, trans);");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"               }");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"           }");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"        }");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"        private string insertRequestCache;");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"        private int insertCacheLength;");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"        private void RangeInsert(List<");
            Write(model.Name);
            WriteLiteral(@"> entities, SqlConnection conn, SqlTransaction trans)");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"        {");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"            if(insertCacheLength != entities.Count)");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"            {");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"                insertRequestCache = ConstructInsertRequest(entities.Count);");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"                insertCacheLength = entities.Count;");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"            }");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"            int i = 0;");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"            var parms = entities.SelectMany(x => GetInsertParameters(x, i++)).ToArray();");
            WriteLiteral(Environment.NewLine);
            if (model.IsStruct)
            {
                WriteLiteral(@"            CiHelper.ExecuteNonQuery(insertRequestCache, parms, conn, trans);");
                WriteLiteral(Environment.NewLine);
            }
            else
            {
                WriteLiteral(@"            CiHelper.ExecuteSelect(insertRequestCache, parms, reader => ReadIdentity(reader, entities), conn, trans);");
                WriteLiteral(Environment.NewLine);
            }
            WriteLiteral(@"        }");
            WriteLiteral(Environment.NewLine);
            if (!model.IsStruct)
            {
                WriteLiteral(Environment.NewLine);
                WriteLiteral(@"        private List<");
                Write(model.Name);
                WriteLiteral(@"> ReadIdentity(SqlDataReader reader, List<");
                Write(model.Name);
                WriteLiteral(@"> entities)");
                WriteLiteral(Environment.NewLine);
                WriteLiteral(@"        {");
                WriteLiteral(Environment.NewLine);
                WriteLiteral(@"            int i = 0;");
                WriteLiteral(Environment.NewLine);
                WriteLiteral(@"            while (reader.Read())");
                WriteLiteral(Environment.NewLine);
                WriteLiteral(@"            {");
                WriteLiteral(Environment.NewLine);
                WriteLiteral(@"                entities[i++].");
                Write(model.KeyFields[0].Name);
                WriteLiteral(@" = ");
                Write(model.KeyFields[0].GetReaderMethod(0));
                WriteLiteral(@";");
                WriteLiteral(Environment.NewLine);
                WriteLiteral(@"            ");
                WriteLiteral(@"}");
                WriteLiteral(Environment.NewLine);
                WriteLiteral(Environment.NewLine);
                WriteLiteral(@"            return entities;");
                WriteLiteral(Environment.NewLine);
                WriteLiteral(@"        ");
                WriteLiteral(@"}");
                WriteLiteral(Environment.NewLine);
            }
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"        private string ConstructInsertRequest(int count)");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"        {");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"            var sb = new StringBuilder();");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"            sb.AppendLine(""INSERT INTO ");
            Write(model.Table.Id);
            WriteLiteral(@""");");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"            sb.AppendLine(""("");");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(Environment.NewLine);
            foreach (var line in model.ValueFields().GetSelectLines())
            {
                WriteLiteral(@"            sb.AppendLine(""");
                Write(line);
                WriteLiteral(@""");");
                WriteLiteral(Environment.NewLine);
            }
            WriteLiteral(@"            sb.AppendLine("") OUTPUT inserted.");
            Write(model.KeyFields[0].Column.Name);
            WriteLiteral(@" VALUES"");");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"            AppendInsertKeys(sb, 0);");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"            for (int i = 1; i < count; i++)");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"            {");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"                sb.AppendLine(""), "");");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"                AppendInsertKeys(sb, i);");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"            }");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"            ");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"            sb.AppendLine("")"");");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"            return sb.ToString();");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"        }");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"        private IEnumerable<SqlParameter> GetInsertParameters(");
            Write(model.Name);
            WriteLiteral(@" entity, int i)");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"        {");
            WriteLiteral(Environment.NewLine);
            var i = 0; 
            foreach (var field in model.ValueFields())
            {
                WriteLiteral(@"            yield return new SqlParameter(""parm");
                Write(i++);
                WriteLiteral(@"i"" + i, entity.");
                Write(field.Name);
                if (field.Column.IsNullable)
                {
                    WriteLiteral(@" ?? (object)DBNull.Value");
                }
                WriteLiteral(@");");
                WriteLiteral(Environment.NewLine);
            }
            WriteLiteral(@"        }");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"        private void AppendInsertKeys(StringBuilder sb, int i)");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"        {");
            WriteLiteral(Environment.NewLine);
            i = 0; 
            foreach (var field in model.ValueFields())
            {
                WriteLiteral(@"                sb.Append(""");
                if (field != model.ValueFields().First())
                {
                    WriteLiteral(@", ");
                }
                else
                {
                    WriteLiteral(@"( ");
                }
                WriteLiteral(@"@");
                WriteLiteral(@"parm");
                Write(i++);
                WriteLiteral(@"i""); sb.Append(i);");
                WriteLiteral(Environment.NewLine);
            }
            WriteLiteral(@"        }");
            WriteLiteral(Environment.NewLine);

            return executed = sb.ToString();
        }
    }
}
