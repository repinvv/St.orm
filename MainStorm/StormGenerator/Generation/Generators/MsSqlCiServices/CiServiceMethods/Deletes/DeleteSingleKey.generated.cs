//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace StormGenerator.Generation.Generators.MsSqlCiServices.CiServiceMethods.Deletes
{
    using StormGenerator.Settings;
    using StormGenerator.Models.GenModels;
    using GeneratorHelpers;
    using System;
    using System.Text;
    using System.Linq;

    [System.CodeDom.Compiler.GeneratedCode("SharpRazor", "1.0.0.0")]
    internal class DeleteSingleKey
    {
        #region constructor
        Model model;
        GenOptions options;

        public DeleteSingleKey(Model model, GenOptions options)
        {
            this.model = model;
            this.options = options;
        }
        #endregion

        #region basic members
        private readonly StringBuilder sb = new StringBuilder();
        private string executed;

        private void WriteLiteral(string text)
        {
            if (!string.IsNullOrEmpty(text))
            {
                sb.Append(text);
            }
        }

        private void Write(object value)
        {
            if (value != null)
            {
                sb.Append(value);
            }
        }

        public override string ToString()
        {
            return executed;
        }
        #endregion

        public string Execute()
        {
            WriteLiteral(@"        public void Delete(");
            Write(model.Name);
            WriteLiteral(@" entity, SqlConnection conn, SqlTransaction trans)");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"        {");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"            ");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"        }");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"        public void Delete(List<");
            Write(model.Name);
            WriteLiteral(@"> entities, SqlConnection conn, SqlTransaction trans)");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"        {");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"            if (entities.Count > MaxAmountForWhereIn)");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"            {");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"                DeleteByTempTable(entities, conn, trans);");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"            }");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"            else");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"            {");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"                DeleteByWhereIn(entities, conn, trans);");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"            }");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"        }");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"        public void DeleteByPrimaryKey(object ids, SqlConnection conn, SqlTransaction trans)");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"        { ");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"            var idsArray = (");
            Write(model.KeyFields[0].Column.CsTypeName);
            WriteLiteral(@"[])ids;");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"            if (idsArray.Length > MaxAmountForWhereIn)");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"            {");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"                DeleteByTempTable(idsArray, conn, trans);");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"            }");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"            else");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"            {");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"                DeleteByWhereIn(idsArray, conn, trans);");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"            }");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"        }");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"        #region delete methods");
            WriteLiteral(Environment.NewLine);
            Write(new DeleteByTempTable(model, options).Execute());
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"        private void DeleteByWhereIn(List<");
            Write(model.Name);
            WriteLiteral(@"> entities, SqlConnection conn, SqlTransaction trans)");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"        {");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"            var whereIn = string.Join("", "", entities.Select((x, i) => """);
            WriteLiteral(@"@");
            WriteLiteral(@"arg"" + i));");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"            var parms = entities.Select((x, i) => new SqlParameter(""");
            WriteLiteral(@"@");
            WriteLiteral(@"arg"" + i, x.");
            Write(model.KeyFields[0].Name);
            WriteLiteral(@")).ToArray();");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"            var sql = ");
            WriteLiteral(@"@");
            WriteLiteral(@"""delete from ");
            Write(model.Table.Id);
            WriteLiteral(@" where ");
            Write(model.KeyFields[0].Column.Name);
            WriteLiteral(@" in ("" + whereIn + "")"";");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"            CiHelper.ExecuteNonQuery(sql, parms, conn, trans);");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"        }");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"        private void DeleteByTempTable(");
            Write(model.KeyFields[0].Column.CsTypeName);
            WriteLiteral(@"[] idsArray, SqlConnection conn, SqlTransaction trans)");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"        {");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"            var table = CiHelper.CreateTempTableName();");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"            CreateIdTempTable(table, conn, trans);");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"            CiHelper.BulkInsert(new SingleKeyDataReader<");
            Write(model.KeyFields[0].Column.CsTypeName);
            WriteLiteral(@">(idsArray), table, conn, trans);");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"            var sql = ");
            WriteLiteral(@"@");
            WriteLiteral(@"""delete e from ");
            Write(model.Table.Id);
            WriteLiteral(@" e");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"  inner join "" + table + ");
            WriteLiteral(@"@");
            WriteLiteral(@""" t on ");
            WriteLiteral(Environment.NewLine);
            foreach (var line in model.GetKeyEqualityLines("e.", "t.", ";"))
            {
                WriteLiteral(@"    ");
                Write(line);
                WriteLiteral(Environment.NewLine);
            }
            WriteLiteral(@"drop table "" + table + "";"";");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"            CiHelper.ExecuteNonQuery(sql, CiHelper.NoParameters, conn, trans);         ");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"        }");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"        private void DeleteByWhereIn(");
            Write(model.KeyFields[0].Column.CsTypeName);
            WriteLiteral(@"[] idsArray, SqlConnection conn, SqlTransaction trans)");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"        { ");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"            var whereIn = string.Join("", "", idsArray.Select((x, i) => """);
            WriteLiteral(@"@");
            WriteLiteral(@"arg"" + i));");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"            var parms = idsArray.Select((x, i) => new SqlParameter(""");
            WriteLiteral(@"@");
            WriteLiteral(@"arg"" + i, x)).ToArray();");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"            var sql = ");
            WriteLiteral(@"@");
            WriteLiteral(@"""delete from ");
            Write(model.Table.Id);
            WriteLiteral(@" where ");
            Write(model.KeyFields[0].Column.Name);
            WriteLiteral(@" in ("" + whereIn + "")"";");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"            CiHelper.ExecuteNonQuery(sql, parms, conn, trans);");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"        }");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"        #endregion");
            WriteLiteral(Environment.NewLine);

            return executed = sb.ToString();
        }
    }
}
