//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace StormGenerator.Generation.Generators.MsSqlCiServices.CiServiceMethods.Deletes
{
    using System.Collections.Generic;
    using StormGenerator.Settings;
    using StormGenerator.Models.GenModels;
    using GeneratorHelpers;
    using System;
    using System.Text;
    using System.Linq;

    [System.CodeDom.Compiler.GeneratedCode("SharpRazor", "1.0.0.0")]
    internal class SingleDeleteRequest
    {
        #region constructor
        Model model;
        List<Field> fields;

        public SingleDeleteRequest(Model model, List<Field> fields)
        {
            this.model = model;
            this.fields = fields;
        }
        #endregion

        #region basic members
        private readonly StringBuilder sb = new StringBuilder();
        private string executed;

        private void WriteLiteral(string text)
        {
            if (!string.IsNullOrEmpty(text))
            {
                sb.Append(text);
            }
        }

        private void Write(object value)
        {
            if (value != null)
            {
                sb.Append(value);
            }
        }

        public override string ToString()
        {
            return executed;
        }
        #endregion

        public string Execute()
        {
            int i = 0;
            WriteLiteral(@"        private const string SingleDeleteRequest = ");
            WriteLiteral(@"@");
            WriteLiteral(@"""DELETE FROM ");
            Write(model.Table.Id);
            WriteLiteral(@" ");
            WriteLiteral(Environment.NewLine);
            foreach (var field in fields)
            {
                var start = field == fields.First() ? "WHERE" : "AND";
                var end = field == fields.Last() ? ";\";" : ",";
                WriteLiteral(@"  ");
                Write(start);
                WriteLiteral(@" ");
                Write(field.Column.Name);
                WriteLiteral(@" = ");
                WriteLiteral(@"@");
                WriteLiteral(@"parm");
                Write(i++);
                WriteLiteral(@"i0");
                Write(end);
                WriteLiteral(Environment.NewLine);
            }

            return executed = sb.ToString();
        }
    }
}
