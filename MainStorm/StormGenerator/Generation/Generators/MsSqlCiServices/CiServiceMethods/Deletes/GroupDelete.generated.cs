//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace StormGenerator.Generation.Generators.MsSqlCiServices.CiServiceMethods.Deletes
{
    using System.Collections.Generic;
    using StormGenerator.Settings;
    using StormGenerator.Models.GenModels;
    using GeneratorHelpers;
    using System;
    using System.Text;
    using System.Linq;

    [System.CodeDom.Compiler.GeneratedCode("SharpRazor", "1.0.0.0")]
    internal class GroupDelete
    {
        #region constructor
        Model model;
        List<Field> fields;
        GenOptions options;

        public GroupDelete(Model model, List<Field> fields, GenOptions options)
        {
            this.model = model;
            this.fields = fields;
            this.options = options;
        }
        #endregion

        #region basic members
        private readonly StringBuilder sb = new StringBuilder();
        private string executed;

        private void WriteLiteral(string text)
        {
            if (!string.IsNullOrEmpty(text))
            {
                sb.Append(text);
            }
        }

        private void Write(object value)
        {
            if (value != null)
            {
                sb.Append(value);
            }
        }

        public override string ToString()
        {
            return executed;
        }
        #endregion

        public string Execute()
        {
            WriteLiteral(@"        private void GroupDelete(List<");
            Write(model.Name);
            WriteLiteral(@"> entities, SqlConnection conn, SqlTransaction trans)");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"        {");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"            var parms = entities.SelectMany((x, i) => GetDeleteParameters(x, i)).ToArray();");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"            var sql = ConstructDeleteRequest(entities.Count);");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"            CiHelper.ExecuteNonQuery(sql, parms, conn, trans);");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"        }");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"        private SqlParameter[] GetDeleteParameters(");
            Write(model.Name);
            WriteLiteral(@" entity, int i)");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"        {");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"            return new[]");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"            {");
            WriteLiteral(Environment.NewLine);
            var i = 0; 
            foreach (var field in fields)
            {
                WriteLiteral(@"                new SqlParameter(""parm");
                Write(i++);
                WriteLiteral(@"i"" + i, SqlDbType.");
                Write(field.GetSqlType());
                WriteLiteral(@")");
                WriteLiteral(Environment.NewLine);
                WriteLiteral(@"                { Value = entity.");
                Write(field.Name);
                if (field.Column.IsNullable)
                {
                    WriteLiteral(@" ?? (object)DBNull.Value");
                }
                WriteLiteral(@" },");
                WriteLiteral(Environment.NewLine);
            }
            WriteLiteral(@"            };");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"        }");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"        private string ConstructDeleteRequest(int count)");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"        {");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"            var sb = new StringBuilder();");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"            for (int i = 0; i < count; i++)");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"            {");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"                sb.AppendLine(GetDeleteRequest(i));");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"            }");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"            return sb.ToString();");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"        }");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"        private string GetDeleteRequest(int index)");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"        {");
            WriteLiteral(Environment.NewLine);
            i = 0;
            WriteLiteral(@"            return ");
            WriteLiteral(@"@");
            WriteLiteral(@"""DELETE from ");
            Write(model.Table.Id);
            WriteLiteral(@" ");
            WriteLiteral(Environment.NewLine);
            foreach (var field in fields)
            {
                var start = field == fields.First() ? "WHERE" : "AND";
                var end = field == fields.Last() ? "\";\";" : "@\"";
                WriteLiteral(@"  ");
                Write(start);
                WriteLiteral(@" ");
                Write(field.Column.Name);
                WriteLiteral(@" = ");
                WriteLiteral(@"@");
                WriteLiteral(@"parm");
                Write(i++);
                WriteLiteral(@"i"" + index + ");
                Write(end);
                WriteLiteral(Environment.NewLine);
            }
            WriteLiteral(@"        }");
            WriteLiteral(Environment.NewLine);

            return executed = sb.ToString();
        }
    }
}
