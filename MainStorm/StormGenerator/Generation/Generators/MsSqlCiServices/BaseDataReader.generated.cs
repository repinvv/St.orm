//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace StormGenerator.Generation.Generators.MsSqlCiServices
{
    using StormGenerator.Settings;
    using System;
    using System.Text;
    using System.Linq;

    [System.CodeDom.Compiler.GeneratedCode("SharpRazor", "1.0.0.0")]
    internal class BaseDataReader : FileGenerator
    {
        #region constructor
        GenOptions options;

        public BaseDataReader(GenOptions options)
        {
            this.options = options;
        }
        #endregion

        public override string FileName => "BaseDataReader";

        public override string Execute()
        {
            WriteLiteral(@"namespace ");
            Write(options.OutputNamespace);
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"{");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"    using System;");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"    using System.Data;");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"    ");
            Write(options.Visibility);
            WriteLiteral(@" abstract class BaseDataReader : IDataReader");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"    {");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"        private readonly int count;");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"        protected int current = -1;");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"        private bool disposed;");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"        ");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"        protected BaseDataReader(int count)");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"        {");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"            this.count = count;");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"        }");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"        public abstract object GetValue(int i);");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"        public abstract int FieldCount { get; }");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"        public bool Read() { return ++current < count; }");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"        #region methods unused for bulk insert");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"        public void Dispose() { disposed = true; }");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"        public string GetName(int i) { return null; }");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"        public string GetDataTypeName(int i) { return null; }");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"        public Type GetFieldType(int i) { return null; }");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"        public int GetValues(object[] values) { return 0; }");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"        public int GetOrdinal(string name) { return 0; }");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"        public bool GetBoolean(int i) { return false; }");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"        public byte GetByte(int i) { return 0; }");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"        public long GetBytes(int i, long fieldOffset, byte[] buffer, int bufferoffset, int length) { return 0; }");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"        public char GetChar(int i) { return '\0'; }");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"        public long GetChars(int i, long fieldoffset, char[] buffer, int bufferoffset, int length) { return 0;}");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"        public Guid GetGuid(int i) { return new Guid(); }");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"        public short GetInt16(int i) { return 0; }");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"        public int GetInt32(int i) { return 0; }");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"        public long GetInt64(int i) { return 0; }");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"        public float GetFloat(int i) { return 0; }");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"        public double GetDouble(int i) { return 0; }");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"        public string GetString(int i) { return null; }");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"        public decimal GetDecimal(int i) { return 0; }");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"        public DateTime GetDateTime(int i) { return new DateTime(); }");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"        public IDataReader GetData(int i) { return null; }");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"        public bool IsDBNull(int i) { return false; }");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"        public object this[int i] { get { return null; } }");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"        public object this[string name] { get { return null; } }");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"        public void Close() { disposed = true; }");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"        public DataTable GetSchemaTable() { return null; }");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"        public bool NextResult() { return false; }");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"        public int Depth { get; private set; }");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"        public bool IsClosed { get { return disposed; } }");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"        public int RecordsAffected { get; private set; }");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"        #endregion");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"    }");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"}");
            WriteLiteral(Environment.NewLine);

            return ToString();
        }
    }
}
