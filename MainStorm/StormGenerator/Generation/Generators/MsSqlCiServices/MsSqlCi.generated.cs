//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace StormGenerator.Generation.Generators.MsSqlCiServices
{
    using StormGenerator.Settings;
    using Storm.Interfaces;
    using StormGenerator.Models;
    using System.Collections.Generic;
    using System;
    using System.Text;
    using System.Linq;

    [System.CodeDom.Compiler.GeneratedCode("SharpRazor", "1.0.0.0")]
    internal class MsSqlCi : FileGenerator
    {
        #region constructor
        GenOptions options;
        List<EntityModel> models;

        public MsSqlCi(GenOptions options, List<EntityModel> models)
        {
            this.options = options;
            this.models = models;
        }
        #endregion

        public override string FileName => "MsSqlCi";

        public override string Execute()
        {
            WriteLiteral(@"namespace ");
            Write(options.OutputNamespace);
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"{");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"    using System;");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"    using System.Data.SqlClient;");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"    using System.Data.Common;");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"    using System.Collections.Generic;");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(Environment.NewLine);
            foreach (var nspace in models.Select(x => x.Model.NamespaceSuffix).Where(x => x != null).Distinct())
            {
                WriteLiteral(@"    using ");
                Write(nspace);
                WriteLiteral(@";");
                WriteLiteral(Environment.NewLine);
            }
            WriteLiteral(@"    ");
            Write(options.Visibility);
            WriteLiteral(@" static class MsSqlCi");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"    {");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"        public static List<T> Get<T>(string query, ");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"            SqlParameter[] parms, ");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"            DbConnection conn, ");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"            DbTransaction trans = null)");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"        {");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"            return GetService<T>().Get(query, parms, (SqlConnection)conn, trans as SqlTransaction);");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"        }");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"        public static List<T> GetByPrimaryKey<T>(object ids, DbConnection conn, DbTransaction trans = null)");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"        {");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"            return GetService<T>().GetByPrimaryKey(ids, (SqlConnection)conn, trans as SqlTransaction);");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"        }");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"        public static void Insert<T>(List<T> entities, DbConnection conn, DbTransaction trans = null)");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"        {");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"            GetService<T>().Insert(entities, (SqlConnection)conn, trans as SqlTransaction);");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"        }");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"        private static Dictionary<Type, object> services =");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"            new Dictionary<Type, object>");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"            {");
            WriteLiteral(Environment.NewLine);
            foreach (var model in models)
            {
                WriteLiteral(@"                { typeof(");
                Write(model.Model.Name);
                WriteLiteral(@"), new ");
                Write(model.Model.Name);
                WriteLiteral(@"CiService() },");
                WriteLiteral(Environment.NewLine);
            }
            WriteLiteral(@"           };");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"        private static ICiService<T> GetService<T>()");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"        {");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"            return services[typeof(T)] as ICiService<T>;");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"        }");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"    }");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"}");
            WriteLiteral(Environment.NewLine);

            return ToString();
        }
    }
}
