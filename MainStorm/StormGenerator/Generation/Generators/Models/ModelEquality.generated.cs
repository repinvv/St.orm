//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace StormGenerator.Generation.Generators.Models
{
    using StormGenerator.Models.GenModels;
    using System;
    using System.Text;
    using System.Linq;

    [System.CodeDom.Compiler.GeneratedCode("SharpRazor", "1.0.0.0")]
    internal class ModelEquality
    {
        #region constructor
        Model model;

        public ModelEquality(Model model)
        {
            this.model = model;
        }
        #endregion

        #region basic members
        private readonly StringBuilder sb = new StringBuilder();
        private string executed;

        private void WriteLiteral(string text)
        {
            if (!string.IsNullOrEmpty(text))
            {
                sb.Append(text);
            }
        }

        private void Write(object value)
        {
            if (value != null)
            {
                sb.Append(value);
            }
        }

        public override string ToString()
        {
            return executed;
        }
        #endregion

        public string Execute()
        {
            WriteLiteral("        #region equality");
            WriteLiteral(Environment.NewLine);
            if (!model.IsStruct)
            {
                WriteLiteral("        public override bool Equals(object obj)");
                WriteLiteral(Environment.NewLine);
                WriteLiteral("        {");
                WriteLiteral(Environment.NewLine);
                WriteLiteral("            return Equals(obj as ");
                Write(model.Name);
                WriteLiteral(");");
                WriteLiteral(Environment.NewLine);
                WriteLiteral("        ");
                WriteLiteral("}");
                WriteLiteral(Environment.NewLine);
            }
            var keyfields = model.KeyFields.Any() ? model.KeyFields : model.Fields;
            WriteLiteral(Environment.NewLine);
            WriteLiteral("        public bool Equals(");
            Write(model.Name);
            WriteLiteral(" other)");
            WriteLiteral(Environment.NewLine);
            WriteLiteral("        {");
            WriteLiteral(Environment.NewLine);
            if (!model.IsStruct)
            {
                WriteLiteral("            if (other == null)");
                WriteLiteral(Environment.NewLine);
                WriteLiteral("            {");
                WriteLiteral(Environment.NewLine);
                WriteLiteral("                return false;");
                WriteLiteral(Environment.NewLine);
                WriteLiteral("            ");
                WriteLiteral("}");
                WriteLiteral(Environment.NewLine);
                WriteLiteral(Environment.NewLine);
            }
            if (keyfields.Count == 1)
            {
                WriteLiteral("            return ");
                Write(keyfields[0].Name);
                WriteLiteral(" == other.");
                Write(keyfields[0].Name);
                WriteLiteral(";");
                WriteLiteral(Environment.NewLine);
            }
            else
            {
                foreach (var field in keyfields)
                {
                    if (field == keyfields[0])
                    {
                        WriteLiteral("            return ");
                        Write(field.Name);
                        WriteLiteral(" == other.");
                        Write(field.Name);
                        WriteLiteral(Environment.NewLine);
                    }
                    else
                    {
                        WriteLiteral("                && ");
                        Write(field.Name);
                        WriteLiteral(" == other.");
                        Write(field.Name);
                        if (field == keyfields.Last())
                        {
                            WriteLiteral(";");
                        }
                        WriteLiteral(Environment.NewLine);
                    }
                }
            }
            WriteLiteral("        }");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(Environment.NewLine);
            WriteLiteral("        public override int GetHashCode()");
            WriteLiteral(Environment.NewLine);
            WriteLiteral("        {");
            WriteLiteral(Environment.NewLine);
            WriteLiteral("            unchecked");
            WriteLiteral(Environment.NewLine);
            WriteLiteral("            {");
            WriteLiteral(Environment.NewLine);
            if (keyfields.Count == 1)
            {
                WriteLiteral("                return ");
                Write(keyfields[0].Name);
                WriteLiteral(".GetHashCode();");
                WriteLiteral(Environment.NewLine);
            }
            else
            {
                foreach (var field in keyfields)
                {
                    if (field == keyfields[0])
                    {
                        WriteLiteral("                int hash = ");
                        Write(field.Name);
                        WriteLiteral(".GetHashCode();");
                        WriteLiteral(Environment.NewLine);
                    }
                    else
                    {
                        WriteLiteral("                hash = (hash * 397) ^ ");
                        Write(field.Name);
                        WriteLiteral(".GetHashCode();");
                        WriteLiteral(Environment.NewLine);
                    }
                }
                WriteLiteral("                return hash; ");
                WriteLiteral(Environment.NewLine);
            }
            WriteLiteral("            }");
            WriteLiteral(Environment.NewLine);
            WriteLiteral("        }");
            WriteLiteral(Environment.NewLine);
            WriteLiteral("        #endregion");
            WriteLiteral(Environment.NewLine);

            return executed = sb.ToString();
        }
    }
}
