//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace StormGenerator.Generation.Generators.Models
{
    using StormGenerator.Models.GenModels;
    using GeneratorHelpers;
    using System;
    using System.Text;
    using System.Linq;

    [System.CodeDom.Compiler.GeneratedCode("SharpRazor", "1.0.0.0")]
    internal class FieldsComparision
    {
        #region constructor
        Model model;

        public FieldsComparision(Model model)
        {
            this.model = model;
        }
        #endregion

        #region basic members
        private readonly StringBuilder sb = new StringBuilder();
        private string executed;

        private void WriteLiteral(string text)
        {
            if (!string.IsNullOrEmpty(text))
            {
                sb.Append(text);
            }
        }

        private void Write(object value)
        {
            if (value != null)
            {
                sb.Append(value);
            }
        }

        public override string ToString()
        {
            return executed;
        }
        #endregion

        public string Execute()
        {
            if (model.KeyFields.Any())
            {
                foreach (var field in model.KeyFields)
                {
                    if (field == model.KeyFields.First())
                    {
                        Write(field.Name);
                        WriteLiteral(" != ");
                        Write(field.TypeDefault());
                        WriteLiteral(Environment.NewLine);
                    }
                    else
                    {
                        WriteLiteral("                && ");
                        Write(field.Name);
                        WriteLiteral(" != ");
                        Write(field.TypeDefault());
                        WriteLiteral(Environment.NewLine);
                    }
                }
                foreach (var field in model.KeyFields)
                {
                    WriteLiteral("                && ");
                    Write(field.Name);
                    WriteLiteral(" == other.");
                    Write(field.Name);
                    WriteLiteral(Environment.NewLine);
                }
            }
            else
            {
                foreach (var field in model.Fields)
                {
                    if (field == model.Fields.First())
                    {
                        Write(field.Name);
                        WriteLiteral(" == other.");
                        Write(field.Name);
                        WriteLiteral(Environment.NewLine);
                    }
                    else
                    {
                        WriteLiteral("                && ");
                        Write(field.Name);
                        WriteLiteral(" == other.");
                        Write(field.Name);
                        WriteLiteral(Environment.NewLine);
                    }
                }
            }
            WriteLiteral("		    ;");

            return executed = sb.ToString();
        }
    }
}
