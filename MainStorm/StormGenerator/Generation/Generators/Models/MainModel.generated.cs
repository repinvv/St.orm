//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace StormGenerator.Generation.Generators.Models
{
    using StormGenerator.Models;
    using StormGenerator.Settings;
    using GeneratorHelpers;
    using System;
    using System.Text;
    using System.Linq;

    [System.CodeDom.Compiler.GeneratedCode("SharpRazor", "1.0.0.0")]
    internal class MainModel : FileGenerator
    {
        #region constructor
        GenOptions options;
        EntityModel entityModel;

        public MainModel(GenOptions options, EntityModel entityModel)
        {
            this.options = options;
            this.entityModel = entityModel;
        }
        #endregion

        public override string FileName => entityModel.Model.Name + ".main";

        public override string Execute()
        {
            var model = entityModel.Model;
            WriteLiteral("namespace ");
            Write(entityModel.GetNamespace(options));
            WriteLiteral(Environment.NewLine);
            WriteLiteral("{");
            WriteLiteral(Environment.NewLine);
            foreach (var u in model.GetUsings())
            {
                WriteLiteral("	using ");
                Write(u);
                WriteLiteral(";");
                WriteLiteral(Environment.NewLine);
            }
            WriteLiteral(Environment.NewLine);
            var type = model.IsStruct ? "struct" : "class";
            WriteLiteral("    ");
            Write(options.Visibility);
            WriteLiteral(" partial ");
            Write(type);
            WriteLiteral(" ");
            Write(model.Name);
            WriteLiteral(" : IEquatable<");
            Write(model.Name);
            WriteLiteral(">");
            WriteLiteral(Environment.NewLine);
            WriteLiteral("    {	");
            WriteLiteral(Environment.NewLine);
            var fields = model.Fields.Where(x => x.IsEnabled).ToList();
            foreach (var field in model.Fields)
            {
                WriteLiteral("        ");
                Write(new ModelField(field, options).Execute());
                WriteLiteral(Environment.NewLine);
                WriteLiteral(Environment.NewLine);
            }
            WriteLiteral("        #region equality");
            WriteLiteral(Environment.NewLine);
            if (model.IsStruct)
            {
                Write(new StructEquality(model).Execute());
            }
            else
            {
                Write(new ClassEquality(model).Execute());
            }
            WriteLiteral("        #endregion");
            WriteLiteral(Environment.NewLine);
            WriteLiteral("    }");
            WriteLiteral(Environment.NewLine);
            WriteLiteral("}");
            WriteLiteral(Environment.NewLine);

            return ToString();
        }
    }
}
