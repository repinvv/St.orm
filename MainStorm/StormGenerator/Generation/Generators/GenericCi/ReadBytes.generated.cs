//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace StormGenerator.Generation.Generators.GenericCi
{
    using System;
    using System.Text;
    using System.Linq;

    [System.CodeDom.Compiler.GeneratedCode("SharpRazor", "1.0.0.0")]
    internal class ReadBytes
    {
        #region basic members
        private readonly StringBuilder sb = new StringBuilder();
        private string executed;

        private void WriteLiteral(string text)
        {
            if (!string.IsNullOrEmpty(text))
            {
                sb.Append(text);
            }
        }

        private void Write(object value)
        {
            if (value != null)
            {
                sb.Append(value);
            }
        }

        public override string ToString()
        {
            return executed;
        }
        #endregion

        public string Execute()
        {
            WriteLiteral("        public static byte[] ReadBytes(this SqlDataReader reader, int index)");
            WriteLiteral(Environment.NewLine);
            WriteLiteral("        {");
            WriteLiteral(Environment.NewLine);
            WriteLiteral("            int bufferSize = 1000;");
            WriteLiteral(Environment.NewLine);
            WriteLiteral("            var buffers = new List<byte[]>();");
            WriteLiteral(Environment.NewLine);
            WriteLiteral("            int start = 0;");
            WriteLiteral(Environment.NewLine);
            WriteLiteral("            byte[] buffer = new byte[bufferSize];");
            WriteLiteral(Environment.NewLine);
            WriteLiteral("            var retval = reader.GetBytes(index, start, buffer, 0, bufferSize);");
            WriteLiteral(Environment.NewLine);
            WriteLiteral("            while (retval == bufferSize)");
            WriteLiteral(Environment.NewLine);
            WriteLiteral("            {");
            WriteLiteral(Environment.NewLine);
            WriteLiteral("                buffers.Add(buffer);");
            WriteLiteral(Environment.NewLine);
            WriteLiteral("                buffer = new byte[bufferSize];");
            WriteLiteral(Environment.NewLine);
            WriteLiteral("                start += bufferSize; ");
            WriteLiteral(Environment.NewLine);
            WriteLiteral("                retval = reader.GetBytes(index, start, buffer, 0, bufferSize);");
            WriteLiteral(Environment.NewLine);
            WriteLiteral("            }");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(Environment.NewLine);
            WriteLiteral("            var outputSize = buffers.Count * bufferSize + retval;");
            WriteLiteral(Environment.NewLine);
            WriteLiteral("            if (outputSize == 0)");
            WriteLiteral(Environment.NewLine);
            WriteLiteral("            {");
            WriteLiteral(Environment.NewLine);
            WriteLiteral("                return null;");
            WriteLiteral(Environment.NewLine);
            WriteLiteral("            }");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(Environment.NewLine);
            WriteLiteral("            var output = new byte[outputSize];");
            WriteLiteral(Environment.NewLine);
            WriteLiteral("            start = 0;");
            WriteLiteral(Environment.NewLine);
            WriteLiteral("            foreach (var buff in buffers)");
            WriteLiteral(Environment.NewLine);
            WriteLiteral("            {");
            WriteLiteral(Environment.NewLine);
            WriteLiteral("                Buffer.BlockCopy(buff, 0, output, start, bufferSize);");
            WriteLiteral(Environment.NewLine);
            WriteLiteral("                start += bufferSize;");
            WriteLiteral(Environment.NewLine);
            WriteLiteral("            }");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(Environment.NewLine);
            WriteLiteral("            Buffer.BlockCopy(buffer, 0, output, start, (int)retval);");
            WriteLiteral(Environment.NewLine);
            WriteLiteral("            return output;");
            WriteLiteral(Environment.NewLine);
            WriteLiteral("        }");
            WriteLiteral(Environment.NewLine);

            return executed = sb.ToString();
        }
    }
}
