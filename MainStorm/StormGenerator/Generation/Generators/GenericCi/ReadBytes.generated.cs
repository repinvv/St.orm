//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace StormGenerator.Generation.Generators.GenericCi
{
    using System;
    using System.Text;
    using System.Linq;

    [System.CodeDom.Compiler.GeneratedCode("SharpRazor", "1.0.0.0")]
    internal class ReadBytes
    {
        #region basic members
        private readonly StringBuilder sb = new StringBuilder();
        private string executed;

        private void WriteLiteral(string text)
        {
            if (!string.IsNullOrEmpty(text))
            {
                sb.Append(text);
            }
        }

        private void Write(object value)
        {
            if (value != null)
            {
                sb.Append(value);
            }
        }

        public override string ToString()
        {
            return executed;
        }
        #endregion

        public string Execute()
        {
            WriteLiteral("        public static byte[] ReadBytes(this SqlDataReader reader, int index, int length)");
            WriteLiteral(Environment.NewLine);
            WriteLiteral("        {");
            WriteLiteral(Environment.NewLine);
            WriteLiteral("            var buffer = new byte[length];");
            WriteLiteral(Environment.NewLine);
            WriteLiteral("            var resultLength = (int)reader.GetBytes(index, 0, buffer, 0, length);");
            WriteLiteral(Environment.NewLine);
            WriteLiteral("            if (resultLength == 0)");
            WriteLiteral(Environment.NewLine);
            WriteLiteral("            {");
            WriteLiteral(Environment.NewLine);
            WriteLiteral("                return null;");
            WriteLiteral(Environment.NewLine);
            WriteLiteral("            }");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(Environment.NewLine);
            WriteLiteral("            if (resultLength == length)");
            WriteLiteral(Environment.NewLine);
            WriteLiteral("            {");
            WriteLiteral(Environment.NewLine);
            WriteLiteral("                return buffer;");
            WriteLiteral(Environment.NewLine);
            WriteLiteral("            }");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(Environment.NewLine);
            WriteLiteral("            var output = new byte[resultLength];");
            WriteLiteral(Environment.NewLine);
            WriteLiteral("            Buffer.BlockCopy(buffer, 0, output, 0, resultLength);");
            WriteLiteral(Environment.NewLine);
            WriteLiteral("            return output;");
            WriteLiteral(Environment.NewLine);
            WriteLiteral("        }");
            WriteLiteral(Environment.NewLine);

            return executed = sb.ToString();
        }
    }
}
